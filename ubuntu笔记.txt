ubuntu系统常识：
/etc/profile: 此文件为系统的每个用户设置环境信息，当用户第一次登录时,该文件被执行，并从/etc/profile.d目录的配置文件中搜集shell的设置
/etc/bashrc: 为每一个运行bash shell的用户执行此文件.当bash shell被打开时，该文件被读取
~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次，默认情况下，它设置一些环境变量，执行用户的.bashrc文件
~/.bashrc: 该文件包含专用于你的bash shell的bash信息，当登录时以及每次打开新的shell时，该文件被读取
~/.bash_logout: 当每次退出系统(退出bash shell)时，执行该文件

/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是"父子"关系
~/.bash_profile是交互式login方式进入bash运行的
~/.bashrc是交互式non-login方式进入bash运行的
通常二者设置大致相同，所以通常前者会调用后者

su  // switch user，切换到某某用户模式，提示输入密码时该密码为切换后账户的密码，用法为“su 账户名称”。如果后面不加账户时系统默认为root账户，密码也为超级账户的密码。没有时间限制
su - {username}  // 这里加了"-"后，表示切换当前的环境变量到新用户的环境变量
su {username}  // 表示不切换环境变量到当前用户下
sudo // 暂时切换到超级用户模式（root）以执行超级用户权限，提示输入密码时该密码为当前用户的密码，而不是超级账户的密码。有时间限制，ubuntu默认为一次时长15分钟
sudo -i  // 为了频繁的执行某些只有超级用户才能执行的权限，而不用每次输入密码，可以使用该命令。提示输入密码时该密码为当前账户的密码。没有时间限制。执行该命令后提示符变为“#”而不是“$”。想退回普通账户时可以执行“exit”或“logout” ，运行结果，PWD=/root
sudo su  // 运行sudo命令给su命令提权（实质上就是su，而su默认是获得root权限），运行结果，PWD=/home/用户名（当前用户主目录）

查看ubuntu版本号
sudo lsb_release -a

查看linux内核版本号
uname -r or uname -a

查看进程
ps -el  // e，查看所有进程状态，ps默认只查看本终端的进程，l，展示进程相关的其它信息
|  // 管道
grep node  // 查找带node字符串的行

杀死进程 
sudo kill {pid}

后台运行进程
nohup cmd [args...] &

文件操作
cp -r a.zip /home/test
rm -r /home/test
mv a.txt b.txt  // 更改文件名

压缩解压及打包命令
tar [-cxtzjvfpPN] 
-c：建立一个压缩文件的参数指令(create 的意思)
-x：解开一个压缩文件的参数指令
-t：查看 tarfile 里面的文件
特别注意，在参数的下达中， c/x/t 仅能存在一个！不可同时存在！因为不可能同时压缩与解压缩。
-z：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？
-v： 显示详细信息
-f： 要处理的文件
tar -zxvf 

查看运行文件所在的路径
which node

查看文件安装路径
whereis android

安全软件
iptables  // 与最新的3.5版本Linux内核集成的IP信息包过滤系统，有利于在Linux系统上更好地控制IP信息包过滤和防火墙配置
fail2ban  // 可以监视系统日志，然后匹配日志的错误信息（正则式匹配）执行相应的屏蔽动作

定时任务
crontab

包管理
sudo dpkg -l
sudo apt-get update  // 更新/etc/apt/sources.list和/etc/apt/sources.list.d中列出的源的地址
sudo apt-get upgrade  // 升级已安装的所有软件包，升级之后的版本就是本地地址里的版本，因此，在执行upgrade之前一定要执行update, 这样才能更新到最新的
sudo apt-get -y install {packageName}  // 安装包， -y，可选项，安装时是否不询问yes/no
sudo apt-get --purge remove {packageName}  // 删除包，--purge，清除配置

安装zsh  // 加强版shell，安装后，可在该用户系统根目录下的.zshrc文件中，定义shell命令的别名，方便使用，如：alias login_server="ssh root@111.11.11.111"
sudo apt-get install zsh
source .zshrc  // 重新载入用户环境变量

安装git
sudo apt-get install git

安装docker
1、sudo apt-get update
2、sudo apt-get install apt-transport-https ca-certificates  // 升级source列表并保证https和ca证书成功安装
3、sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D  // 增加新的GPG密钥
4、vi /etc/apt/sources.list.d/docker.list  // 新增或编辑source列表里的docker.list文件，删除已有的entries，按照系统版本增加entry（Ubuntu Xenial 16.04 (LTS)），deb https://apt.dockerproject.org/repo ubuntu-xenial main
5、sudo apt-get purge lxc-docker  // 重新执行更新操作，并删除老的docker repo，没有安装的话，跳过
6、sudo apt-cache policy docker-engine  // 查看是否有正确的可用版本
7、sudo apt-get install linux-image-extra-$(uname -r)  // 从14.04版本以上开始，docker推荐安装linux-image-extra
8、sudo apt-get update
9、sudo apt-get install docker-engine  // 安装docker
10、sudo service docker start  // 启动docker
11、sudo docker run hello-world  // 测试安装是否正常

安装nvm
1、git clone https://github.com/creationix/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`
2、. ~/.nvm/nvm.sh
3、在~/.bashrc, ~/.profile, 或 ~/.zshrc，添加如下行：
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm

nvm install 4.4.0
nvm use 4.4.0

安装mongodb
sudo apt-get install mongodb

安装redis
sudo apt-get install redis-server
自动安装redis-cli，安装完，自动运行redis，默认端口号为6379

安装nginx
sudo apt-get install nginx

安装pm2
npm install -g pm2

windows环境ssh
PuTTY
PuTTYgen  // 可选，通过***.pem生成***.ppk私钥

--服务器配置实例--
// 登录远程服务器
1、ssh {username}@{server_ip}  // 服务器端未增加该客户端私钥认证时，需输入用户密码
// 增加系统用户，控制访问权限
1、adduser {username}  // 用户信息可不输入
// 给增加的用户授权
1、gpasswd -a {username} sudo  // add user to group sudo
2、sudo visudo  // 会出现一个nano编辑器打开的配置文件sudoers.tmp
3、在配置文件的# User privilege specification后增加一行，{username} ALL=(ALL:ALL) ALL
  说明：
    第一个ALL: on all hosts (if you distribute the same sudoers file to many computers)
    第二个ALL: as any target user
    第三个ALL: as any target group
    第四个ALL: can run any command
4、service ssh restart  // 重启ssh服务 
// 通过ssh，实现无密码登录
1、ssh-keygen -t rsa -b 4096 -C "{email_address}"  // 在客户端执行，生成公钥私钥，密码可不输入，会在系统.ssh目录下，生成id_rsa、id_rsa.pub文件
2、eval "$(ssh-agent -s)"  //  在客户端执行，打开客户端ssh代理
3、ssh-add ~/.ssh/id_rsa  // 在客户端执行，将id_rsa，加入到代理中
4、ssh-keygen -t rsa -b 4096 -C "{email_address}"  // 在服务器端执行，如果服务器已有公钥私钥，可不执行
5、eval "$(ssh-agent -s)"  // 在服务器端执行
6、ssh-add ~/.ssh/id_rsa  // 在服务器端执行
7、vi authorized_keys  // 在服务器端执行，在.ssh目录下，创建授权文件authorized_keys(文件名固定)，该授权，只对当前服务器端用户有效
8、将客户端id_rsa.pub文件中的内容，复制到服务器端的authorized_keys文件中，保存
9、chmod 600 authorized_keys  // 更改文件权限，600，只有拥有者有读写权限
10、sudo service ssh restart  // 重启ssh服务 
11、ssh {username}@{server_ip} // 再次在客户端尝试ssh登录，此时无需输入密码

--项目部署实例--
依赖Docker、Nginx、Let's Sencrypt证书等

安装nginx
sudo apt-get install nginx
/usr/sbin/nginx  // 默认配置启动

安装acme.sh  // 简化申请Let's Sencrypt证书，并自动续签证书，支持http和dns两种方式签发证书
curl  https://get.acme.sh | sh  // 安装acme.sh
export Ali_Key="**********"  // 阿里云的Access key
export Ali_Secret="**********"
acme.sh --issue --dns dns_ali -d abc.com -d *.abc.com  // 使用dns的方式签发证书，目前Let's Sencrypt已支持泛域名
acme.sh --installcert -d abc.com \  // copy证书到指定目录下
        --key-file /etc/nginx/ssl/abc.key \
        --fullchain-file /etc/nginx/ssl/fullchain.cer \
        --reloadcmd "service nginx force-reload"
acme.sh  --upgrade  --auto-upgrade  // 设置自动升级acme.sh
acme.sh --upgrade  --auto-upgrade  0  // 关闭自动升级acme.sh