指定虚拟窗口大小
<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no">  // device-width,其实并非设备真实的宽度

http-equiv，元信息，把content属性关联到http头部，等效设置了http报头，http报头优先级最高
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta http-equiv="content-type" content="...">
<meta http-equiv="expires" content="...">
<meta http-equiv="set-cookie" content="...">
<meta http-equiv="refesh" content="...">
...

MIME(Multipurpose Internet Mail Extensions)类型
描述消息内容类型的因特网标准，用来设定某种扩展名的文件用一种应用程序来打开，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开
text/html
application/octet-stream
image/gif
...

FileReader接口
方法
readAsBinaryString(file); // 将文件读取为二进制编码
readAsText(file, [encoding]); // 将文件读取为文本
readAsDataURL(file); // 将文件读取为DataURL
abort();
事件
abort
error
loadstart
progress
load  // 成功读取
loadend  // 读取完成，无论成功或失败

// 获得实际文件
let file = document.getElementById('input').files[0];
console.log(file.type);

canvas接口
let canvas = document.createElement('canvas');
canvas.getContext('2d').globalAlpha = 0;
canvas.width = 100;
canvas.height = 100;
let data = canvas.toDataURL();  // 将内容保存为图片

web storage网络存储
localStorage，只能存字符串
localStorage.setItem(key, value);
localStorage.getItem(key);
localStorage.removeItem(key);
localStorage.clear();
localStorage.length;
localStorage.key(n);  // 获取第n个数据的key键键名

pjax
ajax，负责更新内容，pushState负责更新url
window.history.pushState(stateObj, name, url);  // name，一般为null
popstate事件，用户后退或前进导致状态堆位置发生改变时触发
window.addEventListener('popstate', function (e) {}, false);  // e.state，stateObj

应用缓存
manifest缓存清单
服务器返回的MIME类型必须配置为：text/cache-manifest
<html manifest="yourname.appcache">...</html>  // appcache固定
manifest包含4个条目
MASTER  // html标签上有manifest参数的文件
CACHE  // 自定义要缓存的文件，永久缓存，直到manifest改变（不是资源改变）
NETWORK  // 允许网络请求的文件，一般用*
FALLBACK  // 用户离线时的备用内容，定义多个资源，必须同域
应用缓存API
window.applicationCache
属性
status  // 默认0
方法
update();
swapCache();
事件
cached
checking
downloading
error
noupdate
obsolete  // 废弃
progress
updateready

html编辑功能
contenteditable  // ture/false，使用户能够编辑某个元素
designMode  // on/off，使用户能够编辑整个页面，通常与iframe配合使用，iframe.contentWindow.document.designMode = 'on';

标签
当浏览器遇到不认识的标签时，会把它们当成内联元素（早版本ie，拒绝给无法识别的元素应用样式），大多数html5元素都是块级元素
分块元素，在页面中创建新的、嵌套纲要的元素，<article>，<aside>，<nav>，<section>，article和section从纲要角度考虑，必须带有标题，div不是分块元素
区块根，这些元素不是从已有的纲要向下分支，而产生自己的纲要，但不会包含着在页面的主纲要视图中。<body>，<blockquote>，<td>，<fieldset>，<figure>，<details>
<header>  // 表示内容的标题或网页的页眉，一个网页可以包含多个header
<footer>  // 目前，html5中规定，只能在footer中放置一些版权、链接之类的信息，不能在footer中放置太多的链接、重要的内容或无关的内容，可以有多个footer，可选择性忽视html5规则
<article>  // 表示一个完整的、自成一体的内容块，如：博客文章，新闻报道
<section>  // 适合带标题的内容区块，可独立成块，没有明确的含义，语义化最后的选择，其中的内容必须开始于一个标题
<aside>  // 表示与周围的文本没有密切相关的内容，可独立成块，可以放置广告、内容链接、醒目引文等
<nav>  // 通常只用于页面中最大最主要的导航区，页面可包含多个nav，nav中可包含除了链接以外的其它元素，如：aside
<main>  // 用于标识网页的主要内容，不能把main嵌套到article或其它任何语义元素里，一个页面只能有一个main元素，html 5.1新增
<figure>  // 添加插图，独立于文本，但在文本中可能会提到它
<figcaption>  // 表示对插图的描述，一般放在figure标签内部，其内部可包含html或文本，此时，图片的alt的属性可忽略
<time>  // 标注日期和时间，datatime属性，可放置计算机能看得懂的通用格式的日期，pubdate属性
<output>  // 标注js计算后返回的值，form属性，for属性
<mark>  // 标注突显文本，默认有浅黄色的背景
<del>  // 删除的文本
<ins>  // 插入的文本
<cite>  // 表示引用
<small>  // 表示附属细则
<em>  // 表示应当重读的文本，外观上表现为斜体
<embed>  // 加入插件
<s>  // 表示不再准确或不再相关的内容，外观上表现为给文本加一条删除线
<details>  // 自带点击时折叠或展开功能，目前只有chrome支持，不建议使用
<summary>  // 标题，放置在details中，可点击，目前只有chrome支持，不建议使用
<hr />  // html5中代表主题切换，外观上仍然表现为一条水平线
<wbr />  // 在需要换行时，在该标签处换行

表单
html5中自带的验证机制，目前只能在提交时统一验证，不能在焦点切换时验证
<fieldset>  // 在表单中，划分逻辑块
<legend>  // 放置标题
for属性，可指向id
placeholder  // ie10之前不支持
autofocus  // ie10之前不支持
novalidate  // 只能用在form标签
formnovalidate  // 用在提交按钮上
required
pattern  // 正则表达式验证，如：pattern="[a-z]{3,}"，pattern中不必使用^, $匹配字段值的开头和结尾，html5会自动确保这一点，错误提示文字取自title属性，注意，不会验证空值
min
max
step
spellcheck  // true/false，检查输入的拼写是否正确
autocomplete  // on/off，自动完成
multiple  // 多选，一般用于select标签，但现在可以用于file（一次性选择多个文件）和email（一次性写入多个邮件地址，用逗号分隔）
autocorrect  // 在移动设备上控制自动纠错
autocapitalize  // 在移动设备上控制自动大小写功能
伪类
:required/:optional  // 根据是否应用了required属性来应用样式，如：input:required:invalid{background: red;}
:valid/:invalid  // 根据是否包含错误来应用样式
:in-range/:out-of-range  // 根据min和max属性判断输入值是否超出范围来应用样式
方法
[input].setCustomValidity(text);  // 自定义验证，该方法会触发浏览器默认验证提示，提示信息内容为text，text为空字符串时，不触发提示信息
新增input类型
浏览器对不认识的input类型，统一都作为普通文本框处理
email
url
search
tel
number  // 默认间隔为1，默认只接受整数，可调整间隔step为0.1等，使支持小数
range  // 监听onchange事件
date  // YYYY-MM-DD
month  // YYYY-MM
week  // YYYY-Www，2016-W02，表示，2016年第二周
time  // HH:mm::ss.ss
datetime-local  // YYYY-MM-DDTHH:mm:ss
datetime  // YYYY-MM-DD HH:mm:ss-HH:mm，datetime目前没有被任何浏览器有效支持，并且将来可能会移除
color
新增控件
<datalist>  // 文本框输入建议下拉列表，完全不可见，必须配合标准的文本框使用，通过list属性，<input type="text" list="test"> <datalist id="test"><option label="测试" value="test"></option>...</datalist>
<progress>  // 进度条，表示任务的进度，不设置value，表示不确定进度条，并非必须出现在表单里
<meter>  // 计量器，表示已知范围内的一个值，外观与progress相似，并非必须出现在表单里
<command>  // 用户可执行的操作
<menu>  // 封装用户可执行的操作

ARIA（accessible rich internet application），无障碍富因特网应用
规定了可在任意html元素上使用的属性
role  // 表示所在元素的用途，如：role="banner"
aria-required  // 针对表单元素，表示用户必须输入值
aria-invalid  // 针对表单元素，表示当前值不正确

RDFa（resource description framework），资源描述框架
一种使用属性向网页嵌入详细信息的标准

微格式（microformats）
一种在网页中嵌入元数据简单而又比较合理的方式，它们附加在通常用于添加样式的class属性上，如：class="vcard"

微数据（microdata）
首先要给相应的元素添加itemscope和itemtype属性，如：<div itemscope itemtype="http://schema.org/Person"></div>
itemscope  // 表示开始一段新的语义内容
itemtype  // 表示内容中包含的数据类型
itemprop  // 标注重要信息，如：<h3 itemprop="name">bugong</h3>
