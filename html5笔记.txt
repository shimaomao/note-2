指定虚拟窗口大小
<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no">  // device-width,其实并非设备真实的宽度

http-equiv，元信息，把content属性关联到http头部，等效设置了http报头，http报头优先级最高
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta http-equiv="content-type" content="...">
<meta http-equiv="expires" content="...">
<meta http-equiv="set-cookie" content="...">
<meta http-equiv="refesh" content="...">
...

MIME(Multipurpose Internet Mail Extensions)类型
描述消息内容类型的因特网标准，用来设定某种扩展名的文件用一种应用程序来打开，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开
text/html
application/octet-stream
image/gif
...

音频与视频
文件的扩展名表示容器的格式
<audio>  // ie9+
src
controls  // 若不配置该属性，就不会出现播放器界面
preload  // auto（预先下载整个文件），metadata（点击播放按钮后，先获取音频文件开头的数据块，从而确定一些基本信息），none（不必预先下载），浏览器不一定执行该属性
autoplay  // 要实现自动播放，需要去掉controls属性
loop
mediagroup  // 可与video共为一组，将多个媒体文件连接到一起，这样它们的播放就是同步的，即一个窗口点击播放，多个同组媒体文件会同时播放
音频对象方法和属性
pause();
play();
canPlayType(MIMEType);  // 返回值''（浏览器不支持），'probably'（浏览器可以支持），'maybe'（希望浏览器支持）
currentTime
new Audio(src);
音频文件格式
MP3（收费）  .mp3  audio/mp3  ie9+
Ogg Vorbis（免费开放）  .ogg  audio/ogg
WAV（未压缩，体积大）  .wav  audio/wav

<video>  // ie9+
src
controls  // 若不配置该属性，就不会出现控制按钮，但播放器界面仍存在
preload
autoplay
loop
muted  // 静音模式
poster  // 3种情况下，使用该封面，1、视频第一帧未加载完毕，2、preload属性设置为none，3、没有找到指定的视频文件
width  // 不用加px，不论怎么设置视频容器的尺寸，视频画面总是会保持自身的比例，空余的部分，留白
height
mediagroup
视频对象方法和属性
pause();
play();
playbackRate  // 改变播放速度，如：2，视频会以正常速度的两倍播放，-1（有些浏览器可能不支持），速度不变，只是会倒退播放
currentTime
duration
seekable  // 获得首个以秒计的视频可寻址范围
事件
onTimeUpdate  // 播放时，会连续触发
onprogress
视频文件格式
H.264（收费）  .mp4  video/mp4  ie9+
Ogg Theora（免费开放）  .ogv  video/ogg
WebM（google推出，免费，效果不如H.264）  .webm  video/webm

<source />  // ie9+
嵌套在audio或video中，可配置多个，此时，要删除audio或video标签上的src属性
<source type="audio/mp3" src="test.mp3" media="(max-width: 568px)">  // type，MIME类型，浏览可根据type，判断是否支持该编码的文件，从而选择是否下载，配置type，可免去浏览器多余的下载，可在该标签使用媒体查询，来下载对应的文件

标记时间的文本轨道
WebVTT（web video text tracks）格式，浏览器广泛支持该标准，文件后缀，.vtt

<track />  // ie10+，添加字幕文件，和source一样，放置在video标签内部
<track src="test.vtt" srclang="en" kind="subtitles" label="english" default>
kind  // 描述了字幕中的内容类型，subtitles，descriptions，chapters，metadata，
captions  // 如果字幕中，包含了对话和音效及音乐线索的描述，可设置该属性
default  // 初始化时选用的字幕

canvas  // ie9+
canvas和audio、video一样，支持后备内容
属性
id
width  // 单位px，不要在样式表中设置canvas尺寸，因为画布的context会忽略样式表中设置的尺寸，而使用标签上直接定义或默认（300px ＊ 150px）的尺寸，此时，样式表设置的尺寸会使画布发生变形
height
let context = canvas.getContext('2d');
context上的方法和属性
context.beginPath();  // 开始一个新线段的绘制，不影响已绘制完成的部分，隔离各线段配置的颜色和宽度等属性，不调用该方法，已绘制的部分，会以新设定的配置，重新绘画，第一次绘制无需调用beginPath
context.closePath();  // 会自动在最后一个绘制点与绘制起点间绘制一条直线
context.moveTo(x, y);
context.lineTo(x, y);
context.fill();  // 填充形状，一般是先填充后描边，否则，轮廓线会有一部分被填充色覆盖掉
context.stroke();  // 真正的着色
context.lineWidth = 10;  // 设置线条宽度，单位像素
context.fillStyle = 'black';
context.strokeStyle = '#eee';  // 设置线条颜色，可使用rgb或rgba函数等
context.lineGap = 'butt';  // 设置线条两端的形状，butt（方头，默认），round（圆头），square（与butt类似，但是会在线条两头各增加一半线宽的长度）
context.lineJoin = 'mitre';  // 指定线段交点的形状，mitre（锐角斜接，默认），round（圆头），bevel（平头斜接）
context.rect(x, y, width, height);
context.clearRect(x, y, width, height);  // 清除画布
context.fillRect(x, y, width, height);  // 填充一个矩形区域
context.strokeRect(x, y, width, height);  // 绘制矩形框
绘制曲线
context.arc(centerX, centerY, radius, startingAngle, endingAngle);  // 绘制曲线，startingAngle，endingAngle，要用弧度表示，3点钟方向为0pi，顺时针为正方向
context.arcTo();
context.bezierCurveTo(controlX_1, controlY_1, controlX_2, controlY_2, endPointX_2, endPointY_2);
context.quadraticCurveTo();  // quadratic，二次
变换
context.translate(x, y);
context.rotate();
context.scale();
context.matrix();
context.save();  // 保存坐标系当前状态
context.restore();  // 恢复坐标系到前一个最近的状态，可多次调用
context.globalAlpha = 0;  // 设置绘图上下文的不透明度
context.globalCompositeOperation = 'source-over';  // 合成操作，源，正在绘制的图形，目标，画布上已绘制的图形
12种合成模式：'source-over'（默认）, 'source-in', 'source-out', 'source-atop', 'destination-over', 'destination-in', 'destination-out', 'destination-atop', 'lighter', 'darker', 'copy', 'xor'
canvas.toDataURL(MIME);  // MIME: 'image/jpeg'...，默认，png，将内容转换为图像文件并编码为url形式，本地模式运行页面，页面中的dataURL功能会失效，此时，只能通过web服务器访问该页面
绘制图像或视频帧
context.getImageData(x, y, width, height);  // 取得原始像素块，取得的对象，有一个data属性，其值为一个像素数组，每一个像素用四个值表示，red, green, blue, alpha，它们先按rgba顺序再按照像素的顺序，放置在data属性中
context.createImageData();  // 创建新的、空的像素块
context.putImageData(imageData, x, y); // 将像素块绘入到画布中
context.drawImage(image | video, sourceX, sourceY, sourceWidth, sourceHeight, x, y, width, height);  // 在画布上绘制图片，x，y，在画布上的定位，如果只传入了3个参数，那么第二个和第三个参数，即为x，y
绘制文本
context.font = '20px bold Arial';
context.textBaseline = 'top';
context.fillText('hello canvas!');  // 相对于绘制线条和图片，绘制文本速度稍慢，如果想创建交互、动态的应用，可以事先把文本保存为图片
context.strokeText('hello canvas!');
context.measureText();  // 计算每行可以放多少个单词
添加阴影
context.shadowColor = 'red';
context.shadowBlur = 20;  // 不小于3才会达到最佳效果
context.shadowOffsetX = 10;
context.shadowOffsetY = 10;
填充图案
let pattern = context.createPattern(image, 'repeat');  // repeat，repeat-x，repeat-y
context.{fillStyle | strokeStyle} = pattern;
填充渐变
let linear = context.createLinearGradient(x1, y1, x2, y2);  // 起点，终点，可确定方向
linear.addColorStop(0, 'red');
linear.addColorStop(0.5, 'yellow');
linear.addColorStop(1, 'green');
context.{fillStyle | strokeStyle} = linear;
let radial = context.createRadialGradient(x1, y1, r1, x2, y2, r2);  // 表示两个圆，非同心圆时，有拉伸、压缩等效果
radial.addColorStop(0, 'red');
radial.addColorStop(0.5, 'yellow');
radial.addColorStop(1, 'green');
context.{fillStyle | strokeStyle} = radial;
创建具有交互能力的canvas
1、记录绘制的每个元素
2、基于坐标或像素做碰撞检测

web storage  // ie8+（ie8中，不支持onstorage事件）
localStorage和sessionStorage的api完全相同，它们的区别仅在于数据的寿命，没有web服务器，不要测试web storage
localStorage  // 用于长期、无限期保存网站的数据，并且站内任何页面都可以访问该数据，只能存储字符串，不能跨域访问，大多数浏览器限制最多可存储5MB的数据
localStorage.setItem(key, value);
localStorage.getItem(key);
localStorage.removeItem(key);
localStorage.clear();
localStorage.length;
localStorage.key(n);  // 获取第n个数据的key键键名
sessionStorage  // 不能跨域访问，用于临时保存针对一个窗口（标签页）的数据，只要用户不关闭窗口（标签页），即使用户从你的网站跑到别的网站再回来，已存储的数据依然存在
onstorage  // localStorage或sessionStorage发生变化时，该站点所有被打开的页面，都会触发onstorage事件，（firefox的window对象没有onstorage属性，但可以用addEventListener，注册侦听storage事件），事件对象e包含的属性，e.oldValue，e.newValue，e.url（导致此次变化的url）

file api  // ie10+
支持该标准的浏览器，能够从计算机硬盘的文件中读取数据，它不能修改、创建文件
// 获得实际文件
let file = document.getElementById('input').files[0];  // file.size（字节），file.type（MIME），file.name（不包括路径）
FileReader类
方法
readAsText(file, [encoding]);  // 将文件读取为文本
readAsDataURL(file);  // 将文件读取为dataURL
readAsBinaryString(file);  // 将文件读取为二进制编码
readAsArrayBuffer(file);  // 将文件读取到一个buffer数组中
abort();
事件
abort
error
loadstart
progress
load  // 成功读取，e.target.result（文件内容）
loadend  // 读取完成，无论成功或失败
通过拖动载入文件
ondragenter
ondragover
ondrop  // e.dataTransfer.files，取得拖进来的文件

indexedDB  // ie10+
支持该标准的浏览器，内含一个完整的、微型的数据库引擎，一个IndexedDB数据库属于某个人，使用特定的电脑和特定的浏览器，访问特定的网站，任何一项发生变化，都会对应一个新的IndexedDB数据库，IndexedDB默认无限期保存数据
let request = window.indexedDB.open('dbname', 1);  // 1，数据库的版本号，1，表示一个全新的数据库
request.onsuccess = function (e) {

  // request.result（数据库对象）
  let store = request.result.createObjectStore('tableName', {keyPath: 'id', autoIncrement: true});  // 创建数据表，keyPath，对象中作为主关键字的属性，可自定义配置属性
  let transaction = request.result.transaction(['tableName'], 'readwrite');  // 创建事务，{readwrite | readonly}，事务类型
  let objectStore = transaction.objectStore('tableName');  // 为事务获取对象存储

  let r1 = objectStore.put(recordObj);  // 添加或更新数据
  r1.onsuccess = function () {};

  let r2 = objectStore.openCursor();  // 创建游标，用于查询所有数据，游标初始定位在第一条数据
  r2.onsuccess = function (e) {
    let cursor = e.target.result;  // cursor，{true ｜ false}
    let record = cursor.value;
    ...
    cursor.continue();  // 访问下一条数据
  };

  let r3 = objectStore.get('mainKeyValue');  // 查询单条数据
  ...

  let r4 = objectStore.delete('mainKeyValue');  // 删除某条数据
  ...
};
request.onerror = function (e) {
  // request.error
};
request.onupgradeneeded = function (e) {  // 在所请求的数据库版本不可用时触发
  // e.oldVersion（当前数据库版本）
};
window.indexedDB.deleteDatabase();  // 删除一个数据库

离线应用  // ie10+，离线应用由一个单独的缓存清单控制，不限定时间
manifest缓存清单，文件后缀名，.appcache（html5标准），也可以使用其它后缀名，如：.manifest（不推荐）
如果缓存清单中写了一个不存在的文件，浏览器会忽略整个缓存清单
如果浏览器缓存了缓存清单，就不会再向服务器请求缓存清单，因此，应该让web服务器明确告诉浏览器不要缓存缓存清单
如果浏览器下载了新的缓存清单，却发现内容没有变化，它同样会停止更新，并使用之前缓存的内容，可以通过修改注释来解决这个问题，如：# version 0.0.1
每次更新缓存内容，不是增量更新，而是全部重新下载一遍，包括丝毫未改的那些文件
服务器返回的MIME类型必须配置为：text/cache-manifest
<html manifest="yourname.appcache">...</html>  // manifest值，为缓存清单的路径和文件名，浏览器会先下载缓存清单，再下载清单里列出的所有文件
manifest
第一行："CACHE MANIFEST"
注释以＃开头
包含4个条目
MASTER  // html标签上有manifest参数的文件
CACHE  // 自定义要缓存的文件，永久缓存，直到manifest改变（不是资源改变），缓存列表不支持通配符*，防止无意间缓存庞大的站点
NETWORK  // 定义未缓存的（永不缓存），（总是）需要联网访问的内容，一般用*（通配符，也可以代表某一部分，如：*.jpg），如果不显式定义该条目，那些未缓存的内容将不会发起网络请求
FALLBACK  // 定义是否根据计算机是否在线而控制显示的内容，每一行，第一个为在线时使用的文件名，第二个为离线后备文件名，必须同域，支持通配符，'/'，有些浏览器可使用*
判断是否在线
1、navigator.onLine，该属性并不准确，因为，该属性只能真实地反应浏览器“脱机工作”的设置，并不能反应是否联网
2、通过FALLBACK，在线和离线时，加载不同的脚步，根据脚步的返回值，来判断
离线应用api
window.applicationCache
属性
status  // 默认0，可以知道浏览器现在在做什么，是在检测更新缓存清单，还是在下载新文件，还是在做其它什么事
方法
update();  // 让浏览器检测是否有新的缓存清单
swapCache();  // 告诉浏览器开始使用新的缓存内容
事件
checking  // 发现网页中的manifest属性时触发
noupdate  // 已经下载了缓存清单，且缓存清单并未改变时触发
downloading  // 浏览器开始下载缓存清单以及其中列出的文件之前触发
progress  // 下载文件期间，不断地触发
cached  // 新离线应用的所有文件第一次下载完成后，触发，此后不会再发生事件
updateready  // 表示浏览器已经下载了新版本的应用，一般需要重新加载页面，才能应用新的缓存
error  // 缓存期间发生任何问题，都会触发
obsolete  // 在检测更新时，发现描述文件不存在时，触发，然后，它会清除缓存，以后，加载页面时，都是从服务器取得实时、最新的页面

服务器发送事件  // 单向的，只能由服务器发送到浏览器，因此，无法知道浏览器是否响应，目前，ie不支持，其它浏览器已支持
让网页与web服务器保持连接，从而web服务器任何时候能够给浏览器发送消息
服务器发送的消息必须遵守的格式
id: 495\n
retry: 15000\n  // 单位ms
data: {\n
data: "a": "test"\n
data: }\n\n
服务器事件的标准规定，需要设置消息内容的MIME类型为text/event-stream
EventSource
let source = new EventSource(url);  // 客户端发送请求，url，服务器端，消息的发送地址，
source.onmessage = function (e) {
  // e.data，得到消息内容
}
source.close();  // 让页面停止监听服务器事件

web socket  // 双向的，浏览器能够保持对web服务器打开的连接，ie10+
WebSocket
let socket = new WebSocket('ws://' + url);  // ws://，一个表示web socket连接的新协议，wss://，表示安全、加密的web socket连接
事件
open
message
close
error
方法
send();
close();
属性
readyState  // 0，还没建立，1，打开并且准备就绪，2，关闭过程中，3，已关闭

web worker  // 可创建多个worker，可在worker线程中，递归创建worker，ie10+
let worker = new Worker('file.js');  // 让worker允许的代码都要放到一个单独的文件中，以防止出现数据共享和竞争
worker.postMessage(data);  // 只能传入一个参数
worker.close();  // 取消后台任务
worker.terminate();  // 取消后台任务，更常用
worker.onmessage = function (e) {
  // e.data  传入的数据
};
worker.onerror = function (error) {
  // error.message
  // error.lineno
  // error.filename
};
worker线程执行的代码的基本格式：
onmessage = function (e) {
  ...
  postMessage(result);
};
importScripts('func.js');  // 该方法，可在worker中导入另一个js文件

会话历史  // ie10+
pjax，ajax，负责更新内容，pushState负责更新url，让浏览器url和当前内容同步
window.history.pushState(stateObj, name, url);  // stateObj，页面的当前状态，可以为任何形式，name，页面的标题（目前没有浏览器支持，一般写为null），url，定义地址栏需要显示的新的url，通过该方法可以改变浏览器地址栏中的url，同时不导致页面刷新
window.history.replaceState(stateObj);  // 修改当前页面相关的状态信息，且不会向历史记录添加任何记录，用的较少
popstate事件，用户后退或前进导致状态堆位置发生改变时触发
window.addEventListener('popstate', function (e) {}, false);  // e.state，stateObj

geolocation  // 地理定位，实际上不属于html5，使用该功能的页面，要经过web服务器转发，ie9+
navigator.geolocation对象
方法
getCurrentPosition(function (position) {  // 成功
  // position对象，属性，timestamp，确定地理位置的时间，coords，地理坐标
  // coords对象的属性
  // latitude  纬度
  // longitude  经度
  // accuracy  精度，单位米
  // altitude  海拔高度，尚无浏览器支持
  // heading  移动方向，尚无浏览器支持
  // speed  移动速度，尚无浏览器支持
}, function (error) {  // 失败
  // error对象的属性
  // code，一个数值，表示问题类型，1，用户未允许，2，网络异常，3，超时
  // message，对问题的简短描述
}, {
  enableHighAccuracy: true,  // 要求高精度的gps位置检测，耗电，默认为false
  timeout: 10000,  // 最终放弃之前，等待位置数据的时间，ms，默认0，无限期等待
  maximumAge: 60000  // 缓存位置数据，默认0，即不使用缓存的地理数据
});  // 异步
watchPosition(function () {}, function () {}, options);  // 跟踪访客移动，浏览每次检测到新位置时触发，该方法返回一个数值，可传给clearWatch();使用
clearWatch();

html编辑功能
contenteditable  // ture/false，使用户能够编辑某个元素
designMode  // on/off，使用户能够编辑整个页面，通常与iframe配合使用，iframe.contentWindow.document.designMode = 'on';

标签
当浏览器遇到不认识的标签时，会把它们当成内联元素（早版本ie(6, 7, 8)，拒绝给无法识别的元素应用样式），大多数html5元素都是块级元素
分块元素，在页面中创建新的、嵌套纲要的元素，<article>，<aside>，<nav>，<section>，article和section从纲要角度考虑，必须带有标题，div不是分块元素
区块根，这些元素不是从已有的纲要向下分支，而产生自己的纲要，但不会包含着在页面的主纲要视图中。<body>，<blockquote>，<td>，<fieldset>，<figure>，<details>
<header>  // 表示内容的标题或网页的页眉，一个网页可以包含多个header
<footer>  // 目前，html5中规定，只能在footer中放置一些版权、链接之类的信息，不能在footer中放置太多的链接、重要的内容或无关的内容，可以有多个footer，可选择性忽视html5规则
<article>  // 表示一个完整的、自成一体的内容块，如：博客文章，新闻报道
<section>  // 适合带标题的内容区块，可独立成块，没有明确的含义，语义化最后的选择，其中的内容必须开始于一个标题
<aside>  // 表示与周围的文本没有密切相关的内容，可独立成块，可以放置广告、内容链接、醒目引文等
<nav>  // 通常只用于页面中最大最主要的导航区，页面可包含多个nav，nav中可包含除了链接以外的其它元素，如：aside
<main>  // 用于标识网页的主要内容，不能把main嵌套到article或其它任何语义元素里，一个页面只能有一个main元素，html 5.1新增
<figure>  // 添加插图，独立于文本，但在文本中可能会提到它
<figcaption>  // 表示对插图的描述，一般放在figure标签内部，其内部可包含html或文本，此时，图片的alt的属性可忽略
<time>  // 标注日期和时间，datatime属性，可放置计算机能看得懂的通用格式的日期，pubdate属性
<output>  // 标注js计算后返回的值，form属性，for属性
<mark>  // 标注突显文本，默认有浅黄色的背景
<del>  // 删除的文本
<ins>  // 插入的文本
<cite>  // 表示引用
<small>  // 表示附属细则
<em>  // 表示应当重读的文本，外观上表现为斜体
<embed>  // 加入插件
<s>  // 表示不再准确或不再相关的内容，外观上表现为给文本加一条删除线
<details>  // 自带点击时折叠或展开功能，目前只有chrome支持，不建议使用
<summary>  // 标题，放置在details中，可点击，目前只有chrome支持，不建议使用
<hr />  // html5中代表主题切换，外观上仍然表现为一条水平线
<wbr />  // 在需要换行时，在该标签处换行

表单
html5中自带的验证机制，目前只能在提交时统一验证，不能在焦点切换时验证
<fieldset>  // 在表单中，划分逻辑块
<legend>  // 放置标题
for属性，可指向id
placeholder  // ie10+
autofocus  // ie10+
novalidate  // 只能用在form标签
formnovalidate  // 用在提交按钮上
required
pattern  // 正则表达式验证，如：pattern="[a-z]{3,}"，pattern中不必使用^, $匹配字段值的开头和结尾，html5会自动确保这一点，错误提示文字取自title属性，注意，不会验证空值
min
max
step
spellcheck  // true/false，检查输入的拼写是否正确
autocomplete  // on/off，自动完成
multiple  // 多选，一般用于select标签，但现在可以用于file（一次性选择多个文件）和email（一次性写入多个邮件地址，用逗号分隔）
autocorrect  // 在移动设备上控制自动纠错
autocapitalize  // 在移动设备上控制自动大小写功能
伪类
:required/:optional  // 根据是否应用了required属性来应用样式，如：input:required:invalid{background: red;}
:valid/:invalid  // 根据是否包含错误来应用样式
:in-range/:out-of-range  // 根据min和max属性判断输入值是否超出范围来应用样式
方法
[input].setCustomValidity(text);  // 自定义验证，该方法会触发浏览器默认验证提示，提示信息内容为text，text为空字符串时，不触发提示信息
新增input类型
浏览器对不认识的input类型，统一都作为普通文本框处理
email
url
search
tel
number  // 默认间隔为1，默认只接受整数，可调整间隔step为0.1等，使支持小数
range  // 监听onchange事件
date  // YYYY-MM-DD
month  // YYYY-MM
week  // YYYY-Www，2016-W02，表示，2016年第二周
time  // HH:mm::ss.ss
datetime-local  // YYYY-MM-DDTHH:mm:ss
datetime  // YYYY-MM-DD HH:mm:ss-HH:mm，datetime目前没有被任何浏览器有效支持，并且将来可能会移除
color
新增控件
<datalist>  // 文本框输入建议下拉列表，完全不可见，必须配合标准的文本框使用，通过list属性，<input type="text" list="test"> <datalist id="test"><option label="测试" value="test"></option>...</datalist>
<progress>  // 进度条，表示任务的进度，不设置value，表示不确定进度条，并非必须出现在表单里
<meter>  // 计量器，表示已知范围内的一个值，外观与progress相似，并非必须出现在表单里
<command>  // 用户可执行的操作
<menu>  // 封装用户可执行的操作

ARIA（accessible rich internet application），无障碍富因特网应用
规定了可在任意html元素上使用的属性
role  // 表示所在元素的用途，如：role="banner"
aria-required  // 针对表单元素，表示用户必须输入值
aria-invalid  // 针对表单元素，表示当前值不正确

RDFa（resource description framework），资源描述框架
一种使用属性向网页嵌入详细信息的标准

微格式（microformats）
一种在网页中嵌入元数据简单而又比较合理的方式，它们附加在通常用于添加样式的class属性上，如：class="vcard"

微数据（microdata）
首先要给相应的元素添加itemscope和itemtype属性，如：<div itemscope itemtype="http://schema.org/Person"></div>
itemscope  // 表示开始一段新的语义内容
itemtype  // 表示内容中包含的数据类型
itemprop  // 标注重要信息，如：<h3 itemprop="name">bugong</h3>
