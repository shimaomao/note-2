基本数据类型
int（可超过64位）
float
bool
str
str[start:end:step]  // 切片，不包含end
len(str)
str.split(',')
','.join(list)
str.startswith('a')
str.endswith('z')
str.find('abc')
str.rfind('abc')  // 最后一个'abc'的位置
str.count('a')
str.isalnum()  // 所有字符都是字母或数字，true | false
str.strip('.')  // 去除字符串尾部的'.'
str.capitalize()  // 字符串首字母大写
str.title()  // 所有单词首字母大写
str.upper()  // 所有字母大写
str.lower()
str.swapcase()  // 所有字母大小写转换
str.center(30)  // 居中字符串
str.ljust(30)  // 字符串左对齐
str.rjust(30)  // 字符串右对齐
str.replace('a', 'b', 100)  // 100，替换多少处

复杂数据类型
列表  // 允许元素重复
list  // []
list() | []  // 创建列表
list[start:end:step]  // 切片，不包含end
list.append(elem)
list.extend(list1)  // 合并列表，也可以使用 +=
list.insert(index, elem)  // index越界时，如果偏移量超过了尾部，则插入到列表最后
del list[index]  // 删除指定位置的元素，无del方法
list.remove(elem)  // 删除具有指定值的元素
list.pop(0)  // 获取并删除指定位置的元素
list.index(elem)  // 查询具有特定值的元素位置
elem in list  // 判断值是否存在，true | false
list.count(elem)  记录特定值出现的次数
','.join(list)
list.sort(reverse=True)  // 原始列表改变，默认升序
sorted(list)  // 不改变原始列表
len(list)
list.copy()  // 复制

元组（不可变）
tuple  // ()，元组占用的空间比列表小，函数的参数以元组的形式传递
tuple() | ()

字典  // 在其他语言中，字典可能会被称作关系型数组、哈希表或哈希图
dictionary  // {}，字典中元素的顺序是无关紧要的，实际存储顺序可能取决于你添加元素的顺序，字典的键必须为不可变对象，因此，元组可以作为字典的键
dict(list) | {}  // 将包含双值子元素的序列（或元组等）转换成字典，如：[ ['a', 'b'], ['c', 'd'], ['e', 'f'] ]
dict.update(otherDict)  // 将一个字典的键值对复制到另一个字典中
del dict[key]
dict.clear()
key in dict  // true | false
dict.get(key, value)  // 可避免越界异常，value，可选值，当key不存在时，返回该可选值，无可选值时，返回None(null类型)
dict.keys()  // 获取所有键
dict.values()
dict.items()
dict.copy()

集合  // 不允许元素重复，且不关注元素顺序，集合就像舍弃了值，仅剩下键的字典一样
set() | {1, 2, 3}  // 只有{}时，会创建空字典
&  // 交集运算符，a & b == a.intersection(b)
|  // 并集运算符，a | b == a.union(b)
-  // 差集运算符，a - b == a.difference(b)
^  // 异或集运算符，a ^ b == a.symmetric_difference(b)
<=  // 判断一个集合是否是另一个集合的子集，a <= b == a.issubset(b)
<  // 真子集
>=  // 超集，a >= b == a.issuperset(b)
>  // 真超集

条件语句
if elif else

循环语句
while else(没有break时，将执行else部分代码段)

迭代
for else(没有break时，将执行else部分代码段)

zip()  // 并行迭代，返回的是一个可迭代的对象
range(start, end, step)  // 返回在特定区间的自然数序列，返回的是一个可迭代的对象

推导式  // 元组是没有推导式
[expression for item in iterable if condition]  // 列表推导式
{key_expression : value_expression for expression in iterable}  // 字典推导式
{expression for expression in iterable if condition}  // 集合推导式
(number for number in range(1, 6))  // 生成器推导式，圆括号之间的是生成器推导式(元组没有推导式)，它返回的是一个生成器对象，一个生成器只能运行一次，但是生成器仅在运行中产生值，不会被存下来，所以不能重新使用或者备份一个生成器

is关键字

函数
def func_name():  // 位置参数，关键字参数，默认参数，默认参数值在函数被定义时已经计算出来,而不是在程序运行时
*  // 当参数被用在函数内部时,星号将一组可变数量的位置参数集合成参数值的元组
**  // 收集关键字参数，将参数收集到一个字典中
在函数体开始的部分附上函数定义说明的文档,这就是函数的文档字符串，help(func)，参数列表和文档字符串，help(func.__doc__)，文档字符串

lambda 函数是用一个语句表达的匿名函数。如：edit_story(stairs, lambda word: word.capitalize() + '!')

生成器  // 用来创建python序列的一个对象，内部使用yield关键字，返回的是一个生成器对象

装饰器  // 实质上是一个函数。它把一个函数作为输入并且返回另外一个函数，@decorator_name，靠近函数定义(def上面)的装饰器最先执行,然后依次向上执行

global关键字  // 读取全局变量而不是函数中的局部变量
locals()  // 返回一个局部命名空间内容的字典
globals()  // 返回一个全局命名空间内容的字典

try:
except IndexError as err:  // 一个IndexError异常赋给变量err

自定义异常
class UppercaseException(Exception):  // 即使没有定义UppercaseException的行为(注意到只使用pass),也可以通过继承其父类Exception在抛出异常时输出错误提示
  pass
raise UppercaseException('error info')
