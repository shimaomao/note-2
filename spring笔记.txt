java -jar ...  // 执行jar包

ApplicationContext  // ioc容器类

@SpringBootApplication  // 底层，@SpringBootConfiguration，@EnableAutoConfiguration...
@SpringBootTest
@RunWith(SpringRunner.class)  // 设置测试驱动为spring的测试驱动，而非junit

@Component
@Controller
@RestController  // 底层@Controller, @ResponseBody
@Service
@Entity
@Configuration  // 配置类，代替以前的spring配置文件
@Bean  // 可在@Configuration配置类中使用，用于添加组件，默认组件id为方法名

@RequestMapping(..)
@GetMapping(...)
@PostMapping(...)
@PutMapping(...)
@DeleteMapping(...)
@RequestBody
@RequestParam(...)
@PathVariable(...)
"redirect:/abc"  // 重定向，/代表当前项目
"forward:/abc"  // 转发
请求域  // 保存用于页面渲染的数据，Model, Map, ModelMap

@Import(...)  // 导入组件到容器
@Conditional(...)  // 控制配置类是否生效

@ConfigurationProperties(prefix = "abc")  // 支持JSR303。spring-boot-configuration-processor（一个用于配置文件属性提示的插件）
@Value("${abc}")  // ${}，环境变量或properties配置文件中的属性值，#{}，spel表达式值

@PropertySource(value = "classpath:abc.properties")  // 加载指定的properties配置文件
@ImportResource(locations = {"classpath:abc.xml"})  // 导入spring配置文件，使得配置文件中的内容生效，如导入bean配置文件

配置文件properties  
配置文件占位符
  a.b＝1
  c=${a.b:默认值}  // ${}，配置文件占位符，占位符中也可以放置随机数，如${random.int}

profile  // spring针对不同的环境提供不同的配置，application-{profile}.properties，yml支持多文档块，---分隔文档块
  激活方式：
    命令行，--spring.profiles.active=dev
    配置文件，spring.profiles.active=dev  
    jvm参数，-Dspring.profiles.active=dev

配置文件加载位置  // 默认配置文件application.properties或application.yml，带profile的配置文件的优先级高于默认配置文件
  优先级由高到低  // 所有配置文件都会生效，各配置文件互补
    项目根目录:./config/
    项目根目录:./
    classpath:/config/
    classpath:/
  spring.config.location  // 通过命令行更改默认配置文件路径，此时，该配置文件优先级最高

自动配置
  扫描所有jar包类路径下的META-INF/spring.factories文件，自动配置该文件中的xxx.EnableAutoConfiguration属性所指定的所有配置类
  xxxAutoConfiguration  // 自动配置类的类名格式
    涉及的注解
      @EnabelConfigurationProperties(xxxProperties.class)
      @ConditionalOnWebApplication  // 底层，@Conditional，判断配置类是否生效，只有配置类的判断条件成立，才会向容器中添加组件
      ...
  xxxProperties  // 自动配置类属性类的类名格式，指定自动配置类可在properties配置文件中定义的属性，通过@ConfigurationProperties实现与properties配置文件的绑定
  自动配置报告  // 用于查看哪些自动配置类生效
    debug=true  // 在默认配置文件application.properties中添加该配置

日志  // spring默认使用jcl，spring boot默认使用slf4j和logback
  抽象层  // jcl(jakarta commons logging), slf4j, jboss-logging
  具体实现  // jul(java.util.logging), log4j, logback, log4j2 
  统一日志框架  // 排除jar包中冲突的日志依赖，pom文件中，配置该jar包的exclusion标签
  日志级别
    trace
    debug
    info  // spring boot默认日志级别
    warn
    error
  配置
    logging.level.com.bugong=trace  // 即root级别
    logging.path=xxx  // path和file都未设置时，只在控制台输出
    logging.file=xxx
    logging.pattern.console=xxx  // 设置控制台日志格式
    logging.pattern.file=xxx  // 设置日志文件日志格式
  日志框架配置文件
    logback.xml or logback-spring.xml  // 推荐logback-spring.xml，可以指定某段配置只在某个环境下生效，通过springProfile标签配置
    log4j2.xml or log4j2-spring.xml
    logging.properties

静态资源映射
  webjars  // 以jar包的方式引入静态资源，打包后存放路径，classpath:/META-INF/resources/webjars/，访问路径，/webjars/**
  默认静态资源存放目录  // 访问路径，/**
    classpath:/META-INF/resources
    classpath:/resources/
    classpath:/static/
    classpath:/public/
    /  // 当前项目根目录
  配置
    spring.resources.static-loactions=classpath:/abc/,...  

模板引擎  // spring boot使用内置的tomcat服务器，默认不支持jsp    
  thymeleaf(spring boot 推荐), velocity, freemarker, jsp
  thymeleaf配置
    spring.thymeleaf.cache=false  // 禁用缓存

spring mvc自动配置  
  配置模式
    模式一，更改spring mvc默认配置，该模式下，先扫描用户自定义的@Bean或@Component等配置，对于容器中只能有一个的组件，如果用户自定义了配置，则放弃默认的自动配置，对于容器中允许多个的组件，则合并添加所有组件
    模式二，扩展spring mvc，@Configuration WebMvcConfigurerAdapter，不能使用@EnableWebMvc(用于全面接管spring mvc)，该模式下，保留了默认的自动配置，也扩展了组件的功能。扩展配置类，xxxConfiguer，如：WebMvcConfigurerAdapter实现了WebMvcConfigurer
  自动配置涉及到的组件类  
    ContentNegotiatingViewResolver  // ViewResolver，视图解析器，得到视图对象，决定渲染、转发还是重定向
    BeanNameViewResolver
    Convert  // 转换器，用于类型转换
    GenericenericConverter
    Formatter  // 格式化器，如日期格式
    HttpMessageConverter  // 消息转换器，用于转换http请求和响应，如：json data <=> User
    MessageCodeResolver  // 定义错误代码生成规则
    ConfigurableWebBindingInitializer  // 初始化WebDataBinder(web数据绑定器)，将http请求发送的数据绑定到java bean中
    ...

国际化  // spring boot已默认实现根据浏览器请求头accept-language的国际化
  配置
    spring.message.basename=i18n.abc  // 自定义国际化文件路径，.代表文件夹
  自定义国际化
    LocaleResolver  // 实现该接口    

拦截器
  HandlerInterceptor  // 实现该接口，然后在WebMvcConfigurerAdapter中注册该拦截器
  登录验证
    req.getRequestDispatcher("/login.html").forward(req, res);  // 验证不通过时，转发请求，RequestDispatcher，转发器