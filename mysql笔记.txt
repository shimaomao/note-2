三大范式
第一范式(1NF)
所有的列都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项
第二范式(2NF)
要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系
第三范式(3NF)
确保表中各列与主键列直接相关，而不是间接相关。即各列与主键列都是一种直接依赖关系

关键字和函数名，规定大写
可用反引号`包裹标识符(库名、表名、字段名、索引、别名...)，以避免与关键字重名
定长，速度快，但浪费空间
不定长，速度慢，但节省空间

锁
共享锁  // 读锁，不阻塞
独占锁  // 写锁，阻塞

整数: tinyint, smallint, mediumint, int, bigint  // 1字节，2字节，3字节，4字节，8字节，默认存在符号位，可通过unsigned属性修改，int(m)，m可大于4，想以0填补前面缺少的位数，可通过zerofill属性修改
浮点数: float(m, d), double(m, d)  // 4字节，8字节，支持unsigned，zerofill
定点数: decimal(m, d)  // 浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值

时间日期: date, time, datetime, timestamp, year  // 3字节，3字节，8字节，4字节，1字节

字符串类型
字符串: char(m), varchar(m)  // 0-255字节，0-65535字节
文本: tinytext, text, mediumtext, longtext  // 0-255字节，0-65535字节，0-16777215字节，0-4294967295字节，不需要定义长度，不可给default值
enum('v1', 'v2', ...)  // 单选字符串，enum的选项都会对应一个数字，依次是1，2，3，4，5...，最多有65535个选项
set('v1', 'v2', ...)  // 多选字符串，set的每个选项值也对应一个数字，依次是1，2，4，8，16...，最多有64个选项，null值的索引是null，空字符串错误值的索引值是0

二进制数据(可用来存储图片、音乐等)  // blob(binary large object)
tinyblob, blob, mediumblob, longblob  // 0-255字节，0-65535字节，0-16777215字节，0-4294967295字节

选择指定的数据库
登录时选择
mysql -D database_name -h host_name -u username -p  // --prompt: 修改命令提示符，－P: 端口，-V: 版本
登录后选择
use database_name;  // use语句可不加分号

显示所有数据库
show databases;

创建数据库
create database database_name [options];

查看库中所有的表
show tables;

列的属性和约束
primary key | unique key | foreign key | key
auto_increment
null | not null
default value
reference  // 外键约束
comment

创建表
CREATE TABLE `test` (
    `id` int(32) UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    `username` VARCHAR(20) NOT NULL,
    `date` DATETIME NOT NULL,
    `overtime` FLOAT(4,2) DEFAULT 0.0,
    `create_time` DATETIME NOT NULL,
    `update_time` DATETIME NOT NULL,
    KEY `username` (`username`),  -- 第一个`username`，索引名
    UNIQUE KEY `username` (`username`),
    CONSTRAINT `work_record_ibfk_1` FOREIGN KEY (`username`) REFERENCES `user` (`username`)  // {on update | on delete}， {cascade | set null | restrict}
    -- cascade: 主表数据被更新(主键值更新)，从表也被更新(外键值更新)。主表记录被删除，从表相关记录也被删除
    -- set null: 主表数据被更新(主键值更新)，从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束
    -- restrict: 拒绝父表删除和更新
) ENGINE = InnoDB DEFAULT CHARSET = utf8;

建立索引
create index index_name [using {hash | btree}] on table_name (field_name);

查看某张表的详细信息
desc table_name;
describe table_name;
show create table table_name;  // 信息更详细

向表中插入数据
insert [into] table_name (field_1, field_2, ...) values (value_1, value_2, ...);

查询表中的数据
select field_1, field_2, ... from table_name where [condition];
condition
1、=, >, <, >=, <=, !=, <>
2、is [not], [not] null, [not] in, [not] like...  // 使用like时，_: 任意单个字符，%: 任意多个字符，单引号需要进行转义\'
3、or, and
group by 
having
order by field_name desc  // 默认asc
limit 1
offset 0
其它
distinct
union
join  // 只有数据存在时才能连接。即连接结果不能出现空行
left join  // 如果数据不存在，左表记录会出现，而右表以null填充
right join  // 如果数据不存在，右表记录会出现，而左表以null填充

更新表中的数据
update table_name set field_1=value_1, field_2=value_2, ... where [condition];

删除表中的数据
delete from table_name where [condition];  // 删除表中所有数据，delete from table_name;

事务
{start transaction | begin}; commit; rollback;
原子性(Atomicity)
一致性(Consistency)
隔离性(Isolation)  // 一个事务对数据库中数据的修改，在未提交前对其它事务的可见性。
  隔离级别：
    1、未提交读(read-uncommitted)，脏读，即使事务未提交，修改也对其它事务可见，一般不会用到
    2、已提交读(read-committed)，oracle, sql server等默认
    3、可重复读(repeatable-read)，mysql默认，innodb默认，同一事务中多次执行同样的读取操作得到的数据是一致的，即使其它事务已对数据作出修改并提交
    4、可串行化(serializable)，最高的隔离级别，会在读取的每一行数据上都加锁，一般只用于没有并发且对数据一致性严格要求的情况
持久性(Durability)

视图
create view view_name as ...

存储过程
create procedure procedure_name (args...)
begin
  ...
end;

触发器  // 记录的增加、修改、删除
create trigger trigger_name ...

sql编程
定义变量
set @my = 1;  // 用户自定义变量在变量名前使用@作为开始符号，select @my:=1，:代表赋值，避免与判断相等冲突

if语句
if ... then ...
elseif ... then ... 
else ...
end if;

case语句
case value 
when ... then ...
else ...
end;

while语句
begin_label: while ... do 
  ...
end while end_label;  

自定义函数
create function function_name (args...)
  ...
returns ...;  

内置函数
数值函数
abs(x)  // 绝对值 abs(-10.9) = 10
format(x, d)  // 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46
ceil(x)
floor(x)
round(x)
mod(m, n)  // 求余
pi()  // 获得圆周率
pow(m, n)  //  m^n
sqrt(x)  // 算术平方根
rand()  // 随机数
truncate(x, d)  // 截取d位小数

时间日期函数
now(), current_timestamp()  // 当前日期时间
current_date()  // 当前日期
current_time()  // 当前时间
date('yyyy-mm-dd hh:ii:ss')  // 获取日期部分
time('yyyy-mm-dd hh:ii:ss')  // 获取时间部分
date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j')  // 格式化时间
unix_timestamp()  // 获得unix时间戳
from_unixtime()  // 从时间戳获得时间

字符串函数
length(string)  // string长度，字节
char_length(string)  // string的字符个数
substring(str, position [,length])  // 从str的position开始，取length个字符
replace(str ,search_str ,replace_str)  // 在str中用replace_str替换search_str
instr(string ,substring)  // 返回substring首次在string中出现的位置
concat(string [,...])  // 连接字串
charset(str)  // 返回字串字符集
lcase(string)  // 转换成小写
left(string, length)  // 从string2中的左边起取length个字符
load_file(file_name)  // 从文件读取内容
locate(substring, string [,start_position])  // 同instr，但可指定开始位置
lpad(string, length, pad)  // 重复用pad加在string开头,直到字串长度为length
ltrim(string)  // 去除前端空格
repeat(string, count)  // 重复count次
rpad(string, length, pad)  // 在str后用pad补充,直到长度为length
rtrim(string)  // 去除后端空格
strcmp(string1 ,string2)  // 逐字符比较两字串大小

聚合函数
max()
min() 
avg()
sum()
count()
group_concat()

其他常用函数
md5()
default()

追加列
alter table table_name add [column] field_name_1 value_type [after {field_name_2 | first}];
修改列
alter table table_name modify new_value_type ...;  // 支持对字段属性进行修改，不能修改字段名，所有原有属性也需写上
alter table table_name change old_field_name new_field_name new_value_type ...;  // 支持对字段名修改
删除列
alter table table_name drop field_name;
主键
alter table table_name add primary key (field_name);
alter table table_name drop primary key;  // 删除主键前需删除其AUTO_INCREMENT属性
外键
alter table table_name add foreign key [index_name] (field_name);  // index_name，索引名可选
alter table table_name drop foreign key field_name;  
索引
alter table table_name add index [index_name] (field_name);  // index_name，索引名可选
alter table table_name drop index index_name;
重命名表
alter table old_table_name rename new_table_name;
rename table old_table_name to new_table_name;
rename table old_table_name to [database_name][.]new_table_name;  // 可将表移动到另一个数据库
删除表
drop table if exists table_name;
清空表数据
truncate table table_name;  // 重置auto_increment的值
复制表结构
create table new_table_name like old_table_name;
复制表结构和数据
create table new_table_name as select * from old_table_name;
删除数据库
drop database database_name;
检查表是否有错误
check table table_name;
修复表错误
repair table table_name;

导出表数据
select * into outfile 文件地址 [控制格式] from table_name;  // outfile可以为任意文件格式，如：a.text
导入数据
load data [local] infile 文件地址 [{replace | ignore}] into table table_name [控制格式];  // local未指定，则数据文件必须在服务器上，replace和ignore关键词控制对现有的唯一键记录的重复的处理

备份与还原 
备份  // 将数据的结构与表内数据保存起来
mysqldump -u username -p {password} database_name table_name > a.sql;  // 导出一张表，-w，携带备份条件
mysqldump -u username -p {password} database_name table_name_1 table_name_2 table_name_3 > a.sql;  // 导出多张表
mysqldump -u username -p {password} database_name > a.sql;  // 导出所有表
mysqldump -u username -p {password} -B database_name > a.sql;  // 导出一个库
还原
source a.sql
mysql -D database_name -h host_name -u username -p < a.sql

用户管理  // mysql.user表
flush privileges  // 刷新权限
增加用户
carete user username [identified by [password] 'password'];
重命名用户
rename user old_username to new_username;
删除用户
drop user username;
设置密码
set password = password('password')  // 为当前用户设置密码
set password for username = password('password')  // 为指定用户设置密码
mysqladmin -u username -p password new_password

权限管理
分配权限/添加用户
grant 权限列表 on table_name to username [identified by [password] 'password'];
查看权限
show grants;  // 查看当前用户权限
show grants for username;
撤消权限
revoke 权限列表 on table_name from username;
revoke all privileges, grant option from username // 撤销所有权限

mysql常用配置：
default-character-set＝utf8
default-storage-engine=InnoDB  // 默认存储引擎

常用命令和函数
delimiter //;  // 自定义命令结束符
select version();  // 数据库版本
select user();  // 当前用户
select database();  // 当前数据库
show variables like '%isola%'  // 查看数据库隔离级别
set session tx_isolation = 'read-committed';  // 设置事务隔离级别为已提交读
set names gbk;  // 设置shell客户端文字编码

---

性能管理和架构设计

性能指标
QPS  // 每秒处理的查询量
TPS
并发量  // 不同于连接数，一般远小于连接数
cpu使用率
磁盘io  // 最好不要在主库上进行数据备份

影响性能的主要因素
服务器硬件
服务器操作系统
  CentOS参数优化
    内核相关参数(/etc/sysctl.conf)
      网络参数
      net.core.somaxconn = 65535  // 设置每个端口最大的监听队列长度
      net.core.netdev_max_backlog = 65535  // 设置发送到队列中的数据包的最大缓存数
      net.ipv4.tcp_max_syn_backlog = 65535  // 未连接的请求最大缓存数
      加快tcp连接的回收
      net.ipv4.tcp_fin_timeout = 10  // 连接超时时间
      net.ipv4.tcp_tw_reuse = 1
      net.ipv4.tcp_tw_recycle = 1
      设置tcp连接接受和发送缓冲区大小的默认值
      net.core.wmem_default = 87380
      net.core.wmem_max = 16777216
      net.core.rmem_default = 87380
      net.core.rmem_max = 16777216
      减少失效连接占用的tcp资源的数量，加快资源回收的效率
      net.ipv4.tcp_keeplive_live = 120
      net.ipv4.tcp_keeplive_intvl = 30
      net.ipv4.tcp_keeplive_probes = 3
      内存相关参数
      kernel.shmmax = 4294967295  // 内核参数中最重要的参数之一，用于定义单个共享内存段的最大值。调整该参数的大小，以便在一个共享内存段下容纳下整个InnoDB缓冲池，因为多个共享内存段会导致性能下降
      vm.swappiness = 0  // 当内存不足时，会对性能产生比较大的影响，设置为0，告诉linux系统，除非虚拟内存完全满了，否者不要使用交换分区
    增加资源限制(/etc/security/limit.conf)  // linux pam，即插入式认证模块的配置文件
      打开文件数的限制
        * soft nofile 65535  // *，对所有用户有效，soft，当前系统生效的设置，nofile，限制打开文件的最大数目。在linux中，一张表通常对应2～3个文件
        * hard nofile 65535  // 表明系统中所能设置的最大值
    磁盘调度策略(/sys/block/devname/queue/scheduler)
      查看调度策略
        cat /sys/block/sda/queue/scheduler
        noop anticipatory deadline [cfq]  // 当前策略为cfg，即公平队列策略，用于桌面级的系统。数据库服务器，选用deadline策略
      设置调度策略为deadline
        echo deadline > /sys/block/sda/queue/scheduler
    文件系统
      windows FAT，NTFS，选用NTFS
      linux EXT3，EXT4，XFS，都有日志功能，选用XFS，性能高
      EXT3，EXT4挂载参数(/etc/fstab)
        data = {writeback | ordered | journal}  // 代表不同的日志策略，InnoDB选writeback
        noatime  // 禁止记录文件的访问时间
        nodiratime  // 禁止记录读取目录的时间
数据库存储引擎  // 存储引擎针对的是表而不是库，不同的表可以使用不同的存储引擎，但是，最好不要混合使用存储引擎，因为，事务、热备份等功能支持不一致，要特别注意
  MyISAM  // <= mysql 5.5.8的版本默认的存储引擎
    表级锁，并发一般，适用于读操作，支持修复损坏的表(repair table ...)，支持全文索引，支持表数据压缩(myisampack命令)
    < 5.0版本，默认表大小最大4G。可通过建表时设置MAX_Rows，AVG_ROW_LENGTH更改
    > 5.0版本，默认表大小最大256TB
    适用场景：非事务型应用，只读类应用，空间类应用(支持空间函数。如存储gps)
  InnoDB
    innodb_file_per_table  // on | off，设置表数据存储空间，独立表空间(方便使用optimize table压缩表空间)还是系统表空间，>== 5.6版本，默认on
    事务型存储引擎，行级锁，高并发，支持在线热备份(不是mysqldump)
    redo log，undo log
    show engine innodb status;  // 查看innodb工作记录
    适用场景：基本都适用
  CSV
    数据以文本方式(CSV格式)存储在文件中，可直接查看、编辑
    不支持索引
    适用场景：作为数据交换的中间表，如：excel -> csv文件 -> mysql数据目录
  Archive
    以zlib压缩表数据，占用空间小，磁盘io少，性能不错
    只支持insert、select
    只允许在自增id列上加索引
    不支持事务
    适用场景：日志和数据采集类应用
  Memory
    所有数据保存在内存中，一旦mysql重启，数据会丢失
    表级锁
    io性能比MyISAM高很多
    支持hash索引(等值查询快，默认)、btree索引(范围查询快)
    不支持text、blob
    max_heap_table_size  // 设置最大表大小，默认16M
    适用场景：查找或映射表，数据分析中间表，缓存周期性聚合数据的结果表
  Federated  // 默认不支持，需手动开启
    提供了访问远程mysql服务器上表的功能，本地不存储数据，只存储表结构和远程数据库连接信息
    性能不太好
    适用场景：偶尔的统计分析及手工查询
数据库配置参数
数据库结构设计
效率低下的sql  // 百分之80的性能问题是由效率低下的sql引起的
高并发使得数据库连接数占满  // 可通过更改数据库配置项max_connections改善，默认100
超高cpu使用率使得cpu资源耗尽从而引起宕机 
  cpu密集型应用选用主频更高的cpu，高并发应用选用更多内核的cpu
  对于web应用，内核数量比频率更重要一些，16核，32核，64核...
  注意不要在64位的主机安装32位的操作系统，内存使用率低、寻址能力低...
可用内存大小
  ssd，fusion io
  MyISAM，索引存储在内存中，数据存储在磁盘中
  InnoDB，索引和数据都存储在内存中
  根据主板配置，内存主频越高越好
  内存越大越好，足够的内存，可以将随机io变成顺序io，但内存到达某一定大小后，对性能影响相对有限
  写操作会先内存中执行，多次写操作后，再将数据同步到磁盘，以提升性能
磁盘io性能下降  // 使用更好的磁盘设备，如fusion io，做好磁盘维护
  传统机器硬盘，价格低，存储空间大，读写慢
  使用RAID技术提升传统机器硬盘性能，RAID是磁盘冗余队列的简称，可以把多个容量较小的磁盘组成一个容量更大的磁盘，并提供数据冗余以保证数据完整性
  固态存储，也称为闪存，SSD，PCI-E SDD(fusion io，占用很多内存，比SSD更贵)，更好的随机读写性能，更好的支持并发，但更容易损坏。对于主从结构，如果只有一块SSD，SSD更应该用在从服务器上，因为单线程随机读，更能发挥SSD性能，延迟少，无写操作，使得SSD不容易损坏
  网络存储SAN和NAS，两种外部文件存储设备连接到服务器上的方法，适合顺序io，不适合随机io，性能一般，受制于网络环境和带宽，常用于数据库备份
网卡流量占满  // 1000Mb等于1000/8MB
  减少从服务器数量
  进行分级缓存
  避免使用select *查询
  分离业务网络和服务器网络
大表  // 单表超过千万行或表数据文件超过10G，导致慢查询、主从延迟(锁表)
  分库分表(垂直切分，水平切分)，难度大，注意避免影响线上业务
  大表历史数据归档，可以把归档表放到不同的服务器上
大事务  // 运行时间比较长，操作的数据比较多的事务，锁太多造成大量阻塞和锁超时，回滚慢，执行慢容易造成主从延迟
  避免一次处理太多的数据，可分批处理
  移除事务中不必要的select

架构
主从复制(读写分离)

