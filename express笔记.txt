express把nodejs的http模块封装在一个简单易用的接口中。且扩展了http模块的功能，使你轻松处理服务器的路由、响应、cookie和http请求的状态。

创建一个express类的实例作为http服务器
var express = require('express');
var app = express();

配置express
通过配置express来定义环境以及express如何处理json解析、路由和视图。
express提供了以下几种方法来配置express：
app.set(setting, value);
app.get(setting);
app.enable(setting);
app.disable(setting);
setting参数的可配置项：
env  定义环境模式字符串，development，testing，production。定义默认值process.env.NODE_ENV
trust proxy  启用/禁用反向代理的支持，默认值disabled
jsonp callback name  设置jsonp请求的默认回调函数名，默认为?callback=
json replacer  定义json replacer回调函数，默认为null
json spaces  格式化json响应时使用的空格数量。默认2，生产中为0
case sensitive routing  启用/禁用路由区分大小写。默认disabled
strict routing  启用/禁用严格路由，/home和/home/不一样。默认disabled
view cache  启用/禁用视图模板编译缓存。默认enabled
view engine  指定呈现模板时，如果从视图中省略了文件扩展名，应该使用默认模板引擎扩展。
views  指定模板引擎用来查找视图模板的路径。默认./views

启动基于http模块的express服务器
app.listen(port);  
事实上，express()返回的值实际上是一个回调函数，它映射了传递到http.createServer()和https.createServer()的回调函数。
http.createServer(app).listen(3000);
https.createServer(options, app).listen(3000);

路由定义为两部分，第一部分是http请求方法，第二部分是url中指定的路径。
实现路由
app.<method>(path, [middleware...], callback);  
<method>部分指的是http请求方法。
path指的是url路径部分
middleware参数是回调函数执行前，要应用的中间件函数。
app.all()，对指定路径的每个请求，不管是否是http方法，都调用回调函数

路由中的参数
实现路由参数的4中方法
1、查询字符串 ?key=value&key=value
app.get('/find', function (req, res) {
	var urlObj = url.parser(req.url, true, false);
	var query = urlObj.query;
	...
});
2、post参数  请求正文中传递参数
3、正则  express使用正则表达式解析url并把与表达式匹配的路径作为参数数组存储。使用正则，可以为你的路径实现不遵循标准的/格式的模式。
/book/12:15
app.get(/^\/book\/(\w+)\:(\w+)$/, function (req, res) {//req.params是与url路径中的条目(分组捕获)匹配的数组
	res.send(req.params[0] + ' ' + req.params[1]);  //12 15
});

4、已定义的参数  在路由路径部分使用:<param_name>按名称定义一个参数。解析路径时，express自动为该参数分配一个名称
app.get('/user/:userid', function (req, res) {//当使用比正则更加结构化的定义的参数时，req.param是一个函数，调用req.param(param_name)返回参数的值。
	res.send(req.param('userid'));
});
为已定义的参数应用回调函数，解析url时，如果express发现某个参数有注册的回调函数时，它就在调用路由处理函数前调用参数的回调函数。一个路由可以有多个回调函数。要注册回调函数使用app.param()方法。
app.param(param_name, function (req, res, next, value) {//value参数时从url路径解析的参数值，注意是app.param()，写在最外层。
	next();  //必须在回调函数的某处调用next()，否则回调链将被破坏。
});

request对象的属性和方法
originUrl
protocol
ip
path
host
method
query
fresh  一个布尔值，当最后修改与当前匹配时为true
stale  一个布尔值，当最后修改与当前匹配时为false
secure  一个布尔值，当建立tls链接时为true
acceptsCharset(charset)  如果由charset指定的字符集受支持，则返回true
get(header)  返回对应header属性的值
headers  请求头的对象形式

response对象

设置标头
get(header);
set(header, value);
set(headerObj);
location(path);  //把header中location标头设置为指定的参数
type(type_string);  //根据type_string参数设置Content-Type标头
attachment([filepath])  //把Content-Disposition(可控制文件是否下载)标头设置为attachment，并且如果指定filepath，则Content-Type是基于文件扩展名设置的。

设置状态
如果响应的http状态时200以外的值，你需要设置它。
res.status(number);  
200  ok
300  redirection 重定向
400  bad request 错误的请求
401  unauthorized 未经许可
403  forbidden 禁止
404  not found  未找到
500  server error 服务器错误

发送响应
res.send(status, [body]);  //status是http状态码，body是一个string或buffer对象。
res.send([body]);
如果指定buffer对象，内容类型被自动设置为application/octet-stream(应用程序/八字节流)，除非你明确将其设置为其它东西，如"text/html"
一旦send()方法完成，它就自动设置res.finished和res.headerSent(已发送的headers)属性

发送json响应
无需调用send()即可发送
res.json(status, [object]);
res.json([object]);
res.jsonp(status, [object]);  //app.get('/jsonp', function () {
	app.set('jsonp callback name', 'cb');  //标识参数自定义为cb，?cb=handleJsonp
});
res.jsonp([object]);

发送文件
res.sendfile(path, [options], [callback]);  //自动帮助完善headers设置，当文件传输完成，callback被调用
options参数配置
maxAge  定义最长期限的内容，1相当于24*60*60*1000
root  定义用来支持path的相对路径

发送下载响应
res.download(path, [filename], [callback]);  //把文件作为http响应的附件发送，自动帮助设置Content-Disposition(内容处置)。
filename参数可指定一个应该在Content-Disposition标头中发送的不同的文件名。

重定向响应
res.redirect(path);

模板引擎

定义一个模板引擎
var app = express();
app.set('views', './views');  //设置模板文件存放位置
app.set('view engine', 'ejs');  //设置使用的模板引擎
app.engine(ext, callback);  //通过模板文件的扩展名注册模板引擎。ext,模板文件的扩展名。callback，支持express呈现的，由模板引擎提供的功能函数。许多引擎在一个_express函数中提供回调功能。
app.engine('ejs', require('ejs')._express);
_express函数往往只能在默认的文件扩展名上工作。要为自定义的文件扩展名注册模板引擎，可使用各模板引擎自己提供的方法。如ejs提供renderFile函数。
app.engine('html', require('ejs').renderFile);  //为html扩展名，注册ejs模板引擎

定义本地对象
locals对象，暂存动态数据，包含映射到模板中定义的变量名称的属性。
express的app对象提供了app.locals属性来存储本地变量，app.locals属性实际上是一个函数，所以不要使用name、apply、bind、length...等来定义自己的变量。
两种赋值方法
1、app.locals.title = 'app';
2、app.locals({title: 'app'});

响应中呈现模板
可以使用app对象或response对象发送呈现后的模板。
app.render(view, [locals], callback);  //locals，本地对象，如果没有在app.locals中定义，可动态传入。callback，在模板被呈现后执行，第一个参数error，第二个参数模板字符串。  
res.render()函数，工作原理与app.render()完全一样，不同之处，不必有回调函数，所呈现的结果在响应中自动发送。如果不需要在发送前，对数据做处理，可使用res.render()，省得再调用res.send()。

express中间件
中间件函数在nodejs收到请求的时间点和发送请求的时间点之间执行。express中使用的connect模块提供了中间件框架，可以方便的在全局或路径级别或为单个路由插入中间件功能。

express支持的一些常用的中间件组件
static  express内置，允许express服务器以流式处理静态文件的get请求。
express-logger  实现一个格式化的请求记录器
basic-auth-connect  提供对基本的http身份验证支持
cookie-parser  可以从请求中读取cookie并在响应中设置cookie
cookie-session  提供基于cookie的会话支持
express-session  更加强大的会话实现
body-parser  把post请求正文中的json数据解析为req.body属性
compression  对发给客户端的大响应提供gzip支持
csurf  提供跨站点请求伪造保护

在全局范围内把中间件分配给某路径
app.use([path], middleware);  //path，可选，默认/，middleware是一个函数，function (req, res, next) {}
每个中间件组件都有一个构造函数，它返回相应的中间件功能。
app.use('/', bodyparser());

把中间件分配到单个路由
app.get('/abc', bodyparser(), function (req, res) {
	
});

运用多个中间件
app.use('/', bodyparser()).use('/', cookieParser()).use('/', session());  //分配函数的顺序，就是它们在请求中被应用的顺序。一些中间件函数，需要放在前面。

query中间件
express 4.x开始，内置此功能。
query中间件将一个查询字符串从url中转换为javascript对象，并将其保存为request对象的query属性。
req.query

static中间件，静态文件服务
express内置，static中间件可以让你直接从磁盘对客户端提供静态文件服务，从而无需自己实现请求处理程序。
express.static(path, [options])
options参数的可配置项
maxAge  浏览器缓存时间，以毫秒为单位，默认为0
hidden  如果为true，表示启用隐藏文件传输功能，默认false
redirect  如果为true，表示如果请求路径是一个目录，则该请求将被重定向到有一个尾随/的路径，默认true
index  根路径的默认文件名，默认为index.html
app.use('/', express.static('./static', {maxAge: 60 * 1000}));
app.use('/images', express.static('../images'));

body-parser中间件
express的body-parser中间件解析请求正文中的json数据，把它们正确地格式化为request对象的req.body属性。
app.use('/', bodyparser());
req.body

cookie-parser中间件
connect 3.0发布时，cookie-parser被重命名为cookie。
cookie中间件从一个请求解析cookie，并将它们作为JavaScript对象存储在req.cookies属性中。
cookieParser([secret]);  //secret字符串参数，利用secret字符串在cookie内部签署，防止cookie的篡改。
在响应中设置cookie
res.cookie(name, value, [options]);
options参数的配置项
maxAge  以毫秒为单位，cookie过期前的生成时间
httpOnly  如果为true，表示这个cookie只能由服务器访问，不能通过客户端JavaScript访问
signed  如果为true，表示该cookie将被签署，你需要使用req.signedCookie而不是req.cookie对象来访问它。
path  该cookie应用的路径
删除cookie
res.clearCookie(name);

cookie-session会话中间件
cookie-session会话中间件底层利用cookie-parser中间件，所以cookie-parser中间件需被先添加。
cookieSession([options]);
options的可配置项：
key  用于标志会话的cookie名称
secret  用来签署会话cookie的字符串，防止cookie窃取
cookie  一个对象，定义cookie的设置，默认包括maxAge、path、httpOnly、signed。默认值{path: '/', httpOnly: true, maxAge: null}
proxy  如果为true，将导致通过x-forwarded-proto设置安全cookie时，信任反向代理。
当cookie-session被实现时，会话存储为req.session对象。你对req.session做的任何改动都会跨越来自同一个浏览器的多个请求流动。

basic-auth-connect http身份验证中间件
basicAuth(function (userName, password) {
	return 判断代码;
})

express-session会话中间件
实现自定义的身份验证机制，并将其存储在一个你可以随意使之过期的会话中
session中间件附加一个session对象到request对象上来实现会话功能。
res.session对象的方法
regenerate([callback]);  重置会话
destory([callback]);  删除会话
save([callback]);  保存会话数据
touch([callback]);  为会话cookie重置maxAge计数
cookie  指定把会话链接到浏览器的cookie对象
crypto模块生成安全的密码来实现会话验证
crypto.createHash('sha256').update(pwd).digset('base64').toString();

实现自定义中间件函数
fucntion myMiddlewareFunc(req, res, next) {//next，是一个通过中间件框架传递的函数，它指向下一个要执行的中间件函数，必须在离开自定义函数前调用它。
	next();
}
app.use(myMiddlewareFunc);

----------------------------------------------------------------------------------------
express 4中的变化
1、express核心和中间件系统：对connect和内建中间件的依赖被删除了。所以你必须自己添加中间件。
express 4不再依赖connect，并且从核心中移除了所有内建的中间件，除了express.static之外。这意味着express现在是一个不依赖路由和中间件的web框架。express的版本变化和发布不再受到中间件的影响。
express 4必须显式添加所有依赖的中间件，npm install  [module_name] --save
express 3中对应express 4 中的模块
Express 3	             Express 4
express.bodyParser	     body-parser + multer
express.compress	     compression
express.cookieSession	 cookie-session
express.cookieParser	 cookie-parser
express.logger	         morgan
express.session	         express-session
express.favicon	         serve-favicon
express.responseTime	 response-time
express.errorHandler	 errorhandler
express.methodOverride	 method-override
express.timeout	         connect-timeout
express.vhost	         vhost
express.csrf	         csurf
express.directory	     serve-index
express.static	         serve-static
express.timeout	         connect-timeout

app.use接受参数
express 4 中，现在可以使用带有一个可变参数的路径来加载中间件，并且从路由处理器中读取参数的值，例如： 
app.use('/book/:id', function(req, res, next) {
  console.log('ID:', req.params.id);
  next();
})

2、路由系统
应用隐式加载路由中间件，所以，现在不必担心router路由中间件加载的次序问题。
增加了两个新的特性来帮助组织路由系统
1)新的方法route，针对一个路由路径创建链式的路由处理器。由于可以在一个地方定义路径，这样有助于创建模块话的路由规则，减少重复。
app.route('/book')
  .get(function(req, res) {
    res.send('Get a random book');
  })
  .post(function(req, res) {
    res.send('Add a book');
  })
  .put(function(req, res) {
    res.send('Update the book');
  })
2)新的类 express.Router，创建模块化的路由处理器。一个Router的实例就是一个完整的中间件和路由系统，由于这个原因，它经常被称为迷你应用。
创建一个名为 bird.js 的路由文件：
var express = require('express');
var router = express.Router();

router.use(function timeLog(req, res, next) {
  console.log('Time: ', Date.now());
  next();
})

router.get('/', function(req, res) {
  res.send('Birds home page');
})

router.get('/about', function(req, res) {
  res.send('About birds');
})
module.exports = router;
 
然后在应用中加载这个路由模块。
var birds = require('./birds');
...
app.use('/birds', birds);
这个应用现在可以处理请求/birds和/birds/about还可以调用 timeLog 中间件。

3、其它变化
对象                       		   	说明
Node                       		   	Express 4 需要 Node 0.10.x 及其以上版本，已经不支持 0.8.x
http.createServer          		   	不再需要 http 模块，应用使用 app.listen() 启动
app.configure()            		   	app.configure()已经被移除使用 process.env.NODE_ENV 或者 app.get('env')来检测环境、配置应用
json.spaces()              		   	在 Express 4中默认禁用了json spaces
Req.location()             		   	不再能获取相对 url
Req.params                 		   	原来是一个数组，现在是对象
Res.locals                 		   	原来是函数，现在是对象
Res.headerSent             		   	修改为 res.headersSent
App.route                  		   	现在作为 app.mountpath 存在  //mount,安装，架置
Res.on('header')           		   	删除
Res.charset                		   	删除
Res.setHeader('Set-Cookie', val)   	这个功能现在限制为设置基本的cookie值使用res.cookie()添加功能