jsx
小写的标签名默认是html标签，大写开头的标签名默认是react标签
class -> className
for -> htmlFor
{}中只能是表达式，不能是for，while等语句

注释
在一个组件的子元素位置使用注释要用{}包起来，如：{/* child comment, put {} around */}

转义
<div dangerouslySetInnerHTML={{__html: 'cc &copy; 2015'}} />  // 禁止转义

事件
合成事件和原生事件，合成事件中的event对象，并不是原生的event对象，且该event对象只在当前的event loop有效，如果想使用原生的e.stopPropagation()，需使用e.nativeEvent.stopPropagation();

组合组件
对于动态数量的子组件，为了保证重新渲染ui的时候能够快速并正确的显示这些子元素，每个元素都需要通过一个特殊的key属性指定一个唯一值
this.props.children  // 组件标签里面包含的子元素会通过this.props.children传递进来

dom操作
findDOMNode()  // 该方法不能用在无状态组件上
ref  // 需尽量避免使用ref
如果ref绑定的值是一个函数，那么再组件完成装载过程后，会调用它，参数node
如果ref是设置在原生html元素上，它拿到的就是dom元素，如果设置在自定义组件上，它拿到的就是组件实例，这时候就需要通过findDOMNode来拿到组件的dom元素
refs  // 通过在要引用的dom元素上面设置一个ref属性指定一个名称，然后通过this.refs.{name}来访问对应的dom元素，ref不能设置在无状态组件上

key和ref两个prop比较特殊，组件不能够直接读取key和ref

组件生命周期
装载过程
constructor
getInitialState  // es6写法，无效
getDefaultProps  // es6写法，无效
componentWillMount
render  // 必须有返回值，可以为null, false...，render只是返回jsx对象，并没有真正的渲染dom
componentDidMount  // 服务器端渲染时，不触发
更新过程
componentWillReceiveProps  // 父组件的render函数被调用时触发，参数nextPorps，通过在函数内部调用this.setState(...)来触发组件更新
shouldComponentUpdate  // 必须有返回值，用于控制是否需要渲染，默认返回true（更新时总是渲染），参数nextProps, nextState
componentWillUpdate
render
componentDidUpdate
卸载过程
componentWillUnmount

强制组件更新
this.forceUpdate()  // 可以通过shouldComponentUpdate停止更新过程，从而控制渲染

propTypes  // PropTypes目前由独立的npm包prop-types提供。只在开发时有作用，即使报错，也不会影响组件的正常执行。线上部署时，可以通过babel-react-optimize包，将代码中的propTypes相关的代码去掉
defaultProps

fiber架构下，如果开启async rendering，在render函数之前的所有函数，都有可能被执行多次

react v16.0
getDerivedStateFromError  // 静态方法，参数error对象
componentDidCatch  // 非静态方法，参数error，info，一般用于记录错误日志，真正控制组件渲染的逻辑还是在render方法中

react v16.3  // deprecate了componentWillReceiveProps、componentWillMount、componentWillUpdate
getDerivedStateFromProps  // 静态方法，参数nextProps, prevState，用于取代componentWillReceiveProps
组件首次装载时，getDerivedStateFromProps会被调用
每当父组件引发当前组件的渲染时，getDerivedStateFromProps会被调用
组件自身setState或forceUpdate时，getDerivedStateFromProps不会被调用，react v16.4更改了这一点

getSnapshotBeforeUpdate  // 非静态方法，参数prevProps，prevState，只在更新过程中被调用，装载过程中不被调用
该函数会在render之后执行，而执行之时DOM元素还没有被更新，给了一个机会去获取DOM信息，返回一个snapshot，这个snapshot会作为componentDidUpdate的第三个参数传入

react v16.4
getDerivedStateFromProps，无论是mounting还是updating，也无论是因为什么引起的updating，全部都会被调用

flux
action  // 生成并发送action，dispatcher.dispatch(...)
dispatcher   // dispatcher.waitFor([...]);
store  // 数据，dispatcher.register(...)，EventEmitter
view  // 注册，监听，取消监听store，调用this.setState(...)触发更新

redux
action  // 只生成action
reducer  // 参数state, action
store  // 通过createStore(reducer, initialValue)创建，store.getState()可以获得状态，store对象必须包含的接口，dispatch，getState，subscribe，unsubscribe，replaceReducer
view  // 发送action（store.dispatch(...)），监听store（store.subscribe(...)），调用this.setState(...)触发更新，取消监听store（store.unsubscribe(...)）
createStore  // 参数，reducer, initialValue, storeEnhancers，当第二个参数为函数时，就会被当作storeEnhancer使用
combineReducers  // 用于合并多个reducer，返回一个新的reducer，用于分发、合并state，这时每个子reducer接受的state只是完整的state树中对应的字段
applyMiddleware  // 有两种用法，1、配合compose使用，参数middlewareA, middlewareB...，返回storeEnhancer，2、包装createStore，参数middlewareA, middlewareB...，返回storeEnhancer，applyMiddleware(middleware)(createStore)
compose  // 组合多个storeEnhancer，参数，(applyMiddleware(...), ...)，applyMiddleware(...)一般放置在第一个
bindActionCreators  // 用于简化mapDispatchToProps的编写，bindActionCreators({handlerName: actionCreator, ...}, dispatch)

扩展redux
中间件  // 一个函数，用来增强dispatch方法，各个中间件对顺序应该无要求
function middleware(dispatch, getState) {
    return function (next) {
        return function(action) {
            next(action);
        }
    }
}
store enhancer  // 一个函数，用于改造、增强store
function storeEnhancer(createStore) {
    return function (reducer, preloadedState, enhancer) {
        let store = createStore(reducer, preloadedState, enhancer);
        return store;
    }
}

容器组件和傻瓜组件  // 傻瓜组件可以写成函数形式，参数props，无状态组件

Provider
childContextTypes  // 必须定义，从而让Provider能够被react认可为一个Context的提供者，Provider必须实现getChildContext方法，返回context对象，其中包含store字段，render方法中直接返回this.props.children
contextTypes  // 需要使用context的子组件必须定义，且定义必须和Provider的childContextTypes定义一致，子组件的constructor中需调用super(props, context)，从而子组件中可以通过this.context访问context

react-redux
connect(mapStateToProps, mapDispatchToProps, mergeProps, options)(DumbComponent)  // 返回容器组件，该容器组件已经默认实现了自定义的shouldComponentUpdate，实现逻辑是对比这次传递给内层傻瓜容器的props和上一次是否一致，如果一致，则直接返回false
mapStateToProps  // 可以为空，参数，state, ownProps（父组件直接传人的props）
mapDispatchToProps  // 可以为空，参数，dispatch, ownProps，可以使用bindActionCreators简化编写，还可以更进一步，直接使用一个handler和action构造函数的映射对象来充当mapDispatchToProps

redux-thunk  // 中间件
异步action对象  // 一个函数，return (dispatch, getState) => {... dispatch(action)}

reselect  // npm包，提高数据获取性能，分两步执行，如果相关状态没有发生改变，就直接使用上一次的缓存结果，否则，进入正常的获取状态流程，createSelector，配合mapStateToProps使用

高阶组件  // HOC（high order component）
一个高阶组件就是一个函数，接受一个组件作为参数，返回另一个组件
代理方式的高阶组件  // extends React.Component，操控props，抽取状态（容器组件），访问ref，包装组合多个组件...
继承方式的高阶组件  // extends SomeComponent，新组件类中return super.render()，操控props，操控生命周期函数

以函数为子组件  // 弥补高级组件对props操控不够灵活的缺点，子组件为函数，因此可以传入参数调用，this.props.children(...)

chrome开发辅助工具
React Devtools  // 查看树形结构
Redux Devtools  // 查看数据流，安装后windows对象上会有一个devToolsExtension属性方法，执行后返回storeEnhancer
React Perf  // 查看react组建渲染的性能问题，配合react-addons-perf包使用

npm包
react-immutable-state-invariant  // 中间件，开发时添加，用于提示警告，是否在reducer中违背纯函数的原则，直接修改参数state
react-addons-perf  // window.Perf = Perf;
react-addons-css-transition-group  // ReactCssTransitionGroup，动画库，借助css3实现动画，用于组件装载和卸载时的动画，css类名规则：-enter, -enter-active, -leave, -leave-active, -appear, -appear-active
react-motion  // 动画库，它不直接参与动画绘制，只是把动画参数不停的传递给子组件（函数式子组件），然后由子组件完成绘制，defaultStyles（初始值），styles（目标值），stiffness（刚度），damping（阻尼）
react-router-redux  // 同步url和store
react-router  // Router, Route, IndexRoute, Link, getComponent = (location, callback) => {require.ensure([], (require) => {...})}

热加载
webpack-dev-middleware  // 动态运行webpack打包生成文件
webpack-hot-middleware  // 处理来自浏览器端的热加载请求或者推送代码到网页
react-hot-loader  // 处理react组件的热加载
webpack-manifest-plugin   // 生成静态资源说明文件
