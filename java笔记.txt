jvm (java virtual machine)
jre (java runtime environment)
jdk (java development kit)

*.java (源文件) -> 编译器 (javac.exe) -> *.class (字节码文件) -> java.exe 执行字节码文件，执行字节码文件时，不能加字节码文件后缀

                            --- java ee 企业应用 (jsp, ejb, service)
                            |
基础核心 java se (api, jvm) -
                            |
                            --- java me 移动设备，游戏，通信

windows配置环境变量
JAVA_HOME（新增） jdk文件夹目录
PATH jdk，bin文件夹目录
CLASSPATH（新增） jdk，lib文件夹目录

myEclipse，集成了一些优秀的插件

java数据类型
                      --- 整数类型 (byte, short, int(4), long)
                      |
           --- 数值型 -
           |          |
           |          --- 浮点类型 (float(4), double(8))
基本数据类型 --- 字符型 (char(2))
           |
           --- 布尔型 (boolean(1))

           --- 类 (class), 如, 字符串(String)
           |
引用数据类型 --- 接口 (interface)
           |
           --- 数组
float型变量赋值时要加f，否则默认浮点数是double型

自动类型转换，小内存类型可自动转为大内存类型
强制类型转换
double a = 1.300;
int b = (int)a;

常量，程序运行过程中不可改变
final String ABC = "hello java!"; // 变量名，全部大写

通过javadoc命令，可将注释生成api帮助文档，javadoc -d out test.java

运算符
算术运算符,  +, -, *, /, %, ++, --
赋值运算符, =, +=, -=, *=, /=, %=
比较运算符, >, <, >=, <=, ==, !=
逻辑运算符, &&, ||, !, ^
条件运算符, a ? b : c

流程控制语句
if () { // 判断值必须是boolean类型
} else if () {
} else {
}

switch () { // 判断值必须是数值或字符类型
	case 'a': // 可以是表达式，但不可是带变量的表达式
		...
	break;
	...
	default:
}

while () { // 判断值必须是boolean类型
}

do {
} while ();

for (int a = 0; a < 10; i++) {
}

continue;

break;

数组
int[] list = {1, 2, 3}; or int list2[] = {1, 2, 3}; // 注意，字面量用{}
int[] a = new int[5];
int[] b = {1, 2, 3, 4, 5}; 等价于 int[] c = new int[]{1, 2, 3, 4, 5}; // 此时不能指定元素个数

for
foreach:
for (int i : arr) {
}

二维数组
int[][] a = {{1, 2, 3}, {1, 2, 3}};
int[][] b = new int[2][3]; // 2行3列

Arrays类
import java.util.Arrays;
Arrays.sort(arr);
Arrays.toString(arr);

方法
public class Test {
	public int print(String a, int b) { // 方法名驼峰
		return b;
	}
}
Test test = new Test();
int a = test.print();

重载
一个类中包含了两个或两个以上同名但参数不一致的方法，调用时，可根据传入的参数，调用对应的方法。

类和对象

成员变量，类的属性，声明时可不初始化该变量而使用默认值
局部变量，类方法中的变量，声明时必须初始化该变量，局部变量不可重复声明

构造方法（类的构造函数，默认系统自动生成）
无返回值，方法名和类名相同
public class Test {
	public Test(String a) { // 可以定义多个构造方法，重载
		System.out.println('construct');
	}
}

静态变量
static修饰，为整个类所有，被所有对象共享。可通过类名访问（推荐），也可以通过对象名访问

实例化时，赋值流程
静态初始化块(static {}, 只在类加载时初始化一次) -> 初始化块({}) -> 构造方法

包
package com.test; // 必须写在源代码第一行，包名命名规范为全部小写
import com.test.*;

访问修饰符
private 本类
默认 本类， 同包
protected 本类，同包，子类
public 本类，同包，子类，其它

this关键字
代表当前对象

面向对象三大特性：封装， 继承， 多态

封装，将类的某些信息隐藏在类的内部，使外部不能直接访问，只能通过该类提供的方法来进行访问
private修饰变量 -> 创建getter和setter方法 -> 在getter和setter中实现控制语句

内部类
定义在类内部的类(可定义在方法中)
必须使用外部类对象来创建内部类对象，而不能直接去 new 一个内部类对象，即：内部类 对象名 = 外部类对象.new 内部类();
内部类的.class文件文件名格式为：外部类名$内部类名.class
内部类可访问外部类，外部类不可访问内部类
要访问外部类的同名变量，可通过：类名.this.{name}访问

继承
java的继承是单继承
private修饰的属性或方法不能被继承
class A extends B {
}

重写
子类的要重写的方法,参数和返回值必须和父类一致,不需要使用特殊的修饰符

final关键字
final public ...
final可修饰类,属性,方法和变量
修饰类时,该类不可被继承
修饰属性时,该属性不能自动被隐式初始化,且只能赋值一次
修饰方法时,该方法不可被重写
修饰变量时,该变量为常量,只能赋值一次

super关键字
代表父类的实例对象
super(); // 调用父类构造函数

Object类
toString();
equals();

多态
对象的多种形态,两个类要有继承关系
引用的多态,父类的引用既可以指向本类对象也可以指向子类对象,反过来不成立
Animal a = new Animal();
Animal a = new Dog();
方法的多态,父类引用本类对象时调用的方法为父类方法,父类引用子类对象时,调用的方法为子类继承或重写的方法,注意,该方法父类必须含有,否则报错

引用类型转换
Dog a = new Dog();
Animal b = a; // 自动类型转换,向上类型转换,无风险
Dog c = b; // 向下类型转换,存在安全性风险,编译器不会通过
instanceof运算符
解决引用类型转换的安全性问题
if (b instanceof Dog) {
  Dog d = (Dog)b; // 强制向下类型转换,且无风险
}

抽象类
abstract关键字
作用:不关注子类的实现,但约束子类有哪些特征
public abstract class A { // 抽象类不能直接创建,定义抽象方法的类必须是抽象类
  public abstract void call();
}

接口
接口,定义类的规范,接口的内容为常量和抽象方法
interface关键字,一般是public,不可以被private或protected修饰,因为其需要被继承
接口可以继承多个父接口,和类不同
abstract interface {name} extends interface1, interface2, ... {
}
implements关键字,实现接口
public class A extends B implements interface1, interface2, ... {
}
可以通过匿名内部类实现接口

UML(unified modeling language)
统一建模语言
类图
-,表示私有
+,表示公有
实线,表示类
虚线,表示接口

异常
          --- Error 硬伤,终结程序
          |
Throwable -
          |
          --- Exception 可处理
try {

} catch (Exception1 e) {

} catch (Exception2 e) {

} finally {

}
如果try-catch代码块中,存在return
try -> catch -> finally -> finally.return -> catch.return -> try.return，没有相应的阶段忽略该阶段，任何阶段的return被执行，则整个语句块结束。
异常链
throws关键字
throw关键字
public void test() throws AException {
  throw new AException('test error!');
}

字符串
java中的字符串一旦创建,就不可改变,如果要创建一个可改变的字符串,需要使用StringBuffer和StringBuilder类
通过字面量声明的相同字符串,其内存地址一致,其它方式生成的相同字符串,内存地址不一致
String a = 'abc';
String b = 'abc';
a == b; // true
String c = new String('abc');
String d = new String('abc');
c == d; // false

StringBuffer是线程安全的，而StringBuilder没有实现线程安全功能，所以性能略高
StringBuilder a = new StringBuilder('abc');

包装类
基本类型不具备对象的特性,可以通过包装类,使基本类型拥有对象的特性
jdk1.5,引入了自动装箱拆箱机制
byte Byte
short Short
int Integer
long Long
float Float
double Double
char Character
boolean Boolean

集合
存储任意数量具有共同属性的对象,在类的内部,对数据进行组织
集合长度可自动增长,数组的长度是固定的

       --- List --- ArrayList
       |
Collection --- Queue --- LinkedList(链表)
       |
       --- Set --- HashSet

Map --- HashMap(哈希表,存储值类型为Entry类<key, value>)

泛型
规定了某集合只能存储特定类型的对象,会在编译时,检查类型
public List<ABC> a; // ABC为泛型约束的类型

Comparable接口
定义默认比较规则

Comparator接口
定义临时比较规则
