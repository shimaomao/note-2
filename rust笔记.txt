变量绑定
模式（patterns）
类型注解（type annotations）
可变性（mutability）
初始化绑定（initializing bindings） //使用之前必须初始化
作用域（scope）
隐藏（shadowing） //重新声明并初始化变量，来覆盖前一个变量绑定

函数
定义函数时，必须为函数参数声明类型，这是一个全推断与无推断的最佳平衡
rust函数只能返回一个值 //->
rust是一个基于表达式的语言，分号与其它基于“大括号和分号”的语言不同，在rust中分号来分隔各个表达式
表达式与语句
表达式返回一个值，而语句不是
rust中语句有两种类型：声明语句和表达式语句（目的是把任何表达式变为语句），其余都是表达式
提早返回（early returns）
发散函数（diverging function）
发散函数并不返回，它拥有一个类型!，代表“发散”
控制台想获取更多的信息，配置rust环境RUST_BACKTRACE=1
函数指针
let f: fn(i32) -> i32 = someFunc; //此时不需要类型推断
let f = someFunc; //此时需要类型推断

原声类型
bool
char //单引号，rust中一个字符占4个字节
数字类型
有符号，无符号，定长，不定长，整型，浮点型
i8
i16
i32 //整型默认
i64
u8
u16
u32
u64 //浮点型默认
isize //依赖底层指针大小，有符号
usize //依赖底层指针大小，无符号
f32 //单精度
f64 //双精度
有符号数，采用补码形式表示
计算机中的有符号数有三种表示方法，即原码、反码和补码，符号位0表示正，1表示负
正数的补码是其本身
求－5对应的补码：
-5对应正数5（00000101） -> 所有位取反（11111010） -> 加1(11111011)
数组，定长的相同类型的元素列表，数组默认是不可变的
数组的类型是[T; N]，T为泛型标记，N代表数组的长度
arr.len(); //获取数组元素数量
let a = [0; 20]; //将数组中每一个元素初始化为相同值的简写
切片(slices)是对一个数组的引用，通过组合&和[]来创建一个切片，如&arr[..],&arr[1..4] //复制1，2，3元素
切片的类型是&[T]，T为泛型
原始字符串类型，str，不定长类型
元组(tuples)，固定大小的有序列表，可用作模式匹配
let x: (i32, &str) = (1, "hello"); //类型，(i32, &str)，&str是一个字符串切片
可以一个逗号来消除一个单元素元组(0,)和一个括号中的值(0)的歧义
元组索引（Tuple Indexing），tuple.0,tuple.1...元组索引使用.而不是[]
函数，函数的类型为!
let x: fn(i32) -> i32 = foo;

注释
// 行注释
/// 文档注释，内建markdown标记支持
//! 文档注释，用来注释包含它的项（crate，模块或者函数），而不是注释位于它之后的项 //crate，箱

if语句
if x == 5 {

} else if x == 6 {

} else {

}
if语句其实是一个表达式
let y = if x == 5 { 10 } else { 15 }; // y: i32
一个没有else的if总是返回()作为返回值

循环
loop
loop { //无限循环，直到一些终止语句被执行

}
while
while judge { //不确定应该循环多少次

}
for
for var in expression { //循环特定的次数，expression是一个迭代器如1..10（不包括上限值10）

}
enumerate方法，记录已经循环了多少次
for (i, j) in (5..10).enumerate() {

}
break; //loop, while, for
continue; //while, for
循环标签，主要用于嵌套循环的流程控制
'test:for i in 0..10 { //注意，标签名单引号并未闭合
  continue 'test;
}

所有权（ownership）
对于任何给定的资源都正好（只）有一个绑定与之对应，当一个绑定离开作用域，它们绑定的资源就会释放
copy特性
基本类型（如数字，bool）都实现了copy特性，因此它们的所有权并不遵循“所有权规则”
可通过函数返回值，交还所有权，也可以通过借用，交还所有权

引用和借用
&T类型为一个引用，它借用了该资源的所有权，一个借用变量的绑定在它离开作用域时并不释放资源，因此可再次使用原始的绑定
普通引用是不可变的，就像绑定一样
&mut T类型，可变引用，允许改变借用的资源
＊var 访问变量引用的资源
任何借用必须位于比拥有者更小的作用域
可以有一个或另一个这两种类型（&T或&mut T）的借用，不过不能同时拥有它们（&T或&mut T）

生命周期
生命周期，定义了一个引用有效的作用域
引用指向一个无效的资源，这叫做悬垂指针（dangling pointer）或者“释放后使用”
fn bar<'a>(x: &'a mut i32) {
}
'a读作“生命周期 a”
用<>声明了生命周期，一个函数可以在<>之间有“泛型参数”，生命周期也是其中一种
'static，该作用域是特殊的，它代表某样东西具有横跨整个程序的生命周期

可变性
mut是模式的一部分
let (mut x, y) = (5, 6);
fn foo(mut x: i32) {}
内部可变性 vs 外部可变性
字段级别可变性，你不能拥有一个一些字段可变而一些字段不可变的结构体

结构体
struct Point { //根据传统，结构体使用大写字母开头，并使用驼峰命名法
  x: i32,
  y: i32
}
访问字段，通过圆点记法，如point.x
rust在语言级别不支持字段可变性
一个包含..的struct表明你想要使用一些其它结构体的拷贝的一些值
let mut point = Point3d { x: 0, y: 0, z: 0 };
point = Point3d { y: 1, .. point };
元组结构体
元组结构体有一个名字，不过它的字段没有
struct Color(i32, i32, i32);
let black = Color(0, 0, 0);
当元组结构体，只有一个元素时，我们称之为新类型（newtype），因为创建了一个与元素类似的类型
struct Inches(i32);
let length = Inches(10);
let Inches(integer_length) = length; //模式匹配
类单元结构体（Unit-like structs）
类单元结构体，定义一个没有任何成员的结构体，它与一个空元组()类似

枚举
enum是一个代表数个可能变量的数据的类型
enum Message {
    Quit,
    ChangeColor(i32, i32, i32),
    Move { x: i32, y: i32 },
    Write(String), //构造器
}
一个enum是一个单独的类型，一个枚举的值可以匹配任何一个变量，枚举有时被叫做“集合类型”，枚举可能值的集合是每一个变量可能值的集合的总和
::语法，来使用枚举中每个变量的名字
构造器可以作为函数，这对我们没有什么直接的帮助，直到我们要用到闭包时，这时我们要考虑将函数作为参数传递给其他函数

match（匹配）
match属于“模式匹配”的范畴
match x {
  1 => println!("abc"),
  ...
  _ => println!("test"); //必须包含_
}
匹配枚举，处理枚举的可能变量
match msg {
  Message::Quit => quit(),
  Message::ChangeColor(r, g, b) => change_color(r, g, b),
  Message::Move { x: x, y: y } => move_cursor(x, y),
  Message::Write(s) => println!("{}", s),
};

模式
常用于let，match
多重模式，'|'
match x {
  1 | 2 => println!("one or two"),
  _ => println!("anything")
}
解构
.. 代表省略的部分
忽略绑定，在模式中使用_来忽视它的类型和值，从而匹配某个分支，也可以在模式中用..来忽略多个值
ref和ref mut //在模式中创建一个引用
范围，可以用...匹配一个范围的值，范围经常用在整数和char上
绑定，可以使用@把值绑定到变量上
let x = 5;
match x {
  e @ 1 ... 5 | e @ 8 ... 10 => println!("got a range element {}", e),
  _ => println!("anything"),
}
守卫（guards），可以用if来引入匹配守卫
let x = 4;
let y = false;
match x {
  4 | 5 if y => println!("yes"),
  _ => println!("no"),
}
混合与匹配，可以对上面的多种匹配方法进行组合

方法语法
rust通过impl关键字，可以实现链式调用，impl关键字定义的函数又称为方法
struct Circle {
  x: f64,
  y: f64,
  radius: f64,
}
impl Circle {
  fn area(&self) -> f64 {
    std::f64::consts::PI * (self.radius * self.radius)
  }
}
fn main() {
  let c = Circle { x: 0.0, y: 0.0, radius: 2.0 };
  println!("{}", c.area());
}
方法的第一参数比较特殊，&self。它有3种变体：self，&self和&mut self
链式方法调用，通过在方法内部返回self来做到这点
关联函数（Associated functions）
可以定义一个不带self参数的关联函数，关联函数构建了一个新的Struct，通过Struct::method()语法调用
创建者模式（Builder Pattern），通过一个Struct构建另一个Struct

vectors（向量）
vector，是一个动态，可增长的数组，被实现为标准库类型Vec<T>
可以使用vec!宏来创建它
let v = vec![1, 2, 3, 4, 5]; //v: Vec<i32>
let v = vec![0; 10]; //十个0
访问元素
[]，必须用usize类型的值来索引
越界访问
尝试访问并不存在的索引，前的线程会panic，如果想处理越界错误而不是panic，可以使用像get或get_mut这样的方法，他们在给出一个无效的索引时返回None
迭代
for var in vector

字符串
可变大小的数据结构
两种字符串类型，&str和String
&str，字符串切片（string slices）
字符串常量是&’static str类型
字符串常量是静态分配的字符串切片，也就是说它储存在我们编译好的程序中，并且整个程序的运行过程中一直存在
String，是一个在堆上分配的字符串，通常通过一个字符串切片调用to_string方法转换而来
String可以通过一个&强制转换为&str
String转换为&str的代价很小，不过从&str转换到String涉及到分配内存
索引（Indexing），因为字符串是有效UTF-8编码的，它不支持索引
as_bytes()
chars().nth()
切片（Slicing），是字节偏移，而不是字符偏移
let dog = "hachiko";
let hachi = &dog[0..5];
连接（Concatenation）
如果你有一个String，你可以在它后面接上一个&str，不过如果你有两个String，你需要使用&来转换其中的一个Sting为&str

泛型
泛型在类型理论中叫做参数多态
泛型函数
fn takes_anything<T>(x: T) {
  // do something with x
}
泛型结构体
impl<T> Point<T> { //给泛型struct增加一个实现
  fn swap(&mut self) {
    std::mem::swap(&mut self.x, &mut self.y);
  }
}

traits
trait，告诉 Rust 编译器一个类型必须提供哪些功能
struct Circle {
  x: f64,
  y: f64,
  radius: f64,
}
trait HasArea {
  fn area(&self) -> f64;
}
impl HasArea for Circle {
  fn area(&self) -> f64 {
    std::f64::consts::PI * (self.radius * self.radius)
  }
}
泛型函数的trait bound（限制）
trait HasArea {
  fn area(&self) -> f64;
}
fn print_area<T: HasArea>(shape: T) {
  println!("This shape has an area of {}", shape.area());
}
泛型结构体的trait bound
struct Rectangle<T> {
  x: T,
  y: T,
  width: T,
  height: T,
}
impl<T: PartialEq> Rectangle<T> {
  fn is_square(&self) -> bool {
    self.width == self.height
  }
}
可以为任何类型实现一个trait
带有trait限制的泛型函数是单态（monomorphization）（mono：单一，morph：形式）的，所以它是静态分发（statically dispatched）的
多trait bound
如果需要多于1个限定，可以使用+
fn foo<T: Clone + Debug>(x: T) {
  x.clone();
  println!("{:?}", x);
}
where 从句（Where clause）
fn bar<T, K>(x: T, y: K) where T: Clone, K: Clone + Debug {
  x.clone();
  y.clone();
  println!("{:?}", y);
}
默认方法（Default methods）
在trait中实现方法，可以使该方法成为默认方法
继承（Inheritance）
trait Foo {
  fn foo(&self);
}
trait FooBar : Foo {
  fn foobar(&self);
}
Deriving（获得）
让Rust为我们自动实现trait
#[derive(Debug)]
struct Foo;
fn main() {
  println!("{:?}", Foo);
}
deriving限制为一些特定的 trait：
Clone
Copy
Debug
Default
Eq
Hash
Ord
PartialEq
PartialOrd

Drop
一个由Rust标准库提供的特殊trait，Drop。Drop trait提供了一个当一个值离开作用域后运行一些代码的方法
struct HasDrop;
impl Drop for HasDrop {
  fn drop(&mut self) {
    println!("Dropping!");
  }
}
有一些细节，例如，值会以与它们声明相反的顺序被丢弃
Drop用来清理任何与struct关联的资源

if let
if let允许你合并if和let来减少特定类型模式匹配的开销
if let Some(x) = option {
  foo(x);
} else {
}
如果一个模式匹配成功，它绑定任何值的合适的部分到模式的标识符中，并计算这个表达式。如果模式不匹配，执行else
while let
while let Some(x) = v.pop() {
  println!("{}", x);
}

trait对象
