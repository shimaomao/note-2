变量绑定
模式（patterns）
类型注解（type annotations）
可变性（mutability）
初始化绑定（initializing bindings） //使用之前必须初始化
作用域（scope）
隐藏（shadowing） //重新声明并初始化变量，来覆盖前一个变量绑定

函数
定义函数时，必须为函数参数声明类型，这是一个全推断与无推断的最佳平衡
rust函数只能返回一个值 //->
rust是一个基于表达式的语言，分号与其它基于“大括号和分号”的语言不同，在rust中分号来分隔各个表达式
表达式与语句
表达式返回一个值，而语句不是
rust中语句有两种类型：声明语句和表达式语句（目的是把任何表达式变为语句），其余都是表达式
提早返回（early returns）
发散函数（diverging function）
发散函数并不返回，它拥有一个类型!，代表“发散”
控制台想获取更多的信息，配置rust环境RUST_BACKTRACE=1
函数指针
let f: fn(i32) -> i32 = someFunc; //此时不需要类型推断
let f = someFunc; //此时需要类型推断

原声类型
bool
char //单引号，rust中一个字符占4个字节
数字类型
有符号，无符号，定长，不定长，整型，浮点型
i8
i16
i32 //整型默认
i64
u8
u16
u32
u64 //浮点型默认
isize //依赖底层指针大小，有符号
usize //依赖底层指针大小，无符号
f32 //单精度
f64 //双精度
有符号数，采用补码形式表示
计算机中的有符号数有三种表示方法，即原码、反码和补码，符号位0表示正，1表示负
正数的补码是其本身
求－5对应的补码：
-5对应正数5（00000101） -> 所有位取反（11111010） -> 加1(11111011)
数组，定长的相同类型的元素列表，数组默认是不可变的
数组的类型是[T; N]，T为泛型标记，N代表数组的长度
arr.len(); //获取数组元素数量
let a = [0; 20]; //将数组中每一个元素初始化为相同值的简写
切片(slices)是对一个数组的引用，通过组合&和[]来创建一个切片，如&arr[..],&arr[1..4] //复制1，2，3元素
切片的类型是&[T]，T为泛型
原始字符串类型，str，不定长类型
元组(tuples)，固定大小的有序列表，可用作模式匹配
let x: (i32, &str) = (1, "hello"); //类型，(i32, &str)，&str是一个字符串切片
可以一个逗号来消除一个单元素元组(0,)和一个括号中的值(0)的歧义
元组索引（Tuple Indexing），tuple.0,tuple.1...元组索引使用.而不是[]
函数，函数的类型为!
let x: fn(i32) -> i32 = foo;
