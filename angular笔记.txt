生命周期
constructor  OnChanges  OnInit  DoCheck                      OnDestroy
                                         AfterContentInit     
                                         AfterContentChecked  
                                         AfterViewInit
                                         AfterViewChecked  

ngModel指令，数据双向绑定，需导入FormsModule（@angular/forms）模块

装饰器
@NgModule({
  declarations: [AppComponent],  // 声明本模块拥有的视图类，angular有3种视图类，组件、指令、管道（如：currentHero?.birthdate | date:'longDate'）
  exports: [AppComponent],  // declaration的子集，可用于其它模块中的组件
  imports: [BrowserModule],  // 本模块组件模板中需要由其它模块导出的类
  providers: [Logger]  // 在模块providers中定义的服务，会被注册到根注入器，在应用中的任何部分都可被访问到，注意，懒加载模块中通过providers定义的服务，并未注册到根注入器，因此，这些服务只能在子模块中使用，另一种用法：useClass，useExisting（定义别名），useValue，useFactory
  bootstrap: [AppComponent]  // 标识出应用的主视图（被称为根组件），它是所有其它视图的宿主，只有根模块才能设置bootstrap属性
})

@Component({
  moduleId: module.id,  // 为与模块相关的url（如templateUrl）提供基地址
  selector: 'hero-list', 
  templateUrl: 'hero-list.component.html',  // 另一种用法template
  styleUrls: ['./style.scss'],  // 另一种用法style
  providers: [HeroService],  // 在组件providers中定义的服务，只在该组件及其各级子组件中可用
  pipes: [LowercasePipe],
  directives: [Tooltip],
  changeDetection: ChangeDetectionStrategy.OnPush,  // 脏值检测策略，CheckOnce、Checked、CheckAlways、Detached（分离）、Default、OnPush
})

@Directive
@Pipe()
@Injectable()  // 标志着一个类（依赖者而非被依赖者）可以被一个注入器实例化。通常来讲，在试图实例化一个没有被标识为@Injectable()的类时候，注入器将会报告错误
@Inject(APP_CONFIG)  // let APP_CONFIG = new OpaqueToken('app.config');
@RouteConfig()  // 定义路由
@Optional()  // 依赖注入时，依赖可选非必须
@SkipSelf()  // 依赖注入时，跳过依赖自身，防止循环依赖
@Self()  // 依赖注入时，依赖自身